from django.shortcuts import render, redirect
from django.http import JsonResponse
import openpyxl
import pandas as pd

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/index.html', {})
    elif request.method == "POST":
        excel_file = request.FILES.get("excel_file")
        if excel_file:
            wb = openpyxl.load_workbook(excel_file)
            worksheet = wb.active

            excel_data = []
            for row in worksheet.iter_rows(values_only=True):
                excel_data.append(row)

            # Convert excel_data to a pandas DataFrame
            df = pd.DataFrame(excel_data[1:], columns=excel_data[0])

            # Store the DataFrame in session
            request.session['df'] = df.to_dict()

            return redirect('myapp:dashboard')
        else:
            return render(request, 'myapp/index.html', {"error": "No file uploaded"})

def dashboard(request):
    df_dict = request.session.get('df')
    if not df_dict:
        return redirect('myapp:index')

    dropdown_options = {
        'variable': list(df_dict.keys()),
        'dataset': ['Dataset1', 'Dataset2', 'Dataset3'],
        'country': ['Country1', 'Country2', 'Country3'],
        'model': ['Model1', 'Model2', 'Model3']
    }

    return render(request, 'myapp/dashboard.html', {'dropdown_options': dropdown_options})

































from django.shortcuts import render
from django.http import JsonResponse
import pandas as pd
from openpyxl import load_workbook
import random

def chart(request):
    if request.method == "GET":
        # Initialize dropdown options (replace with actual data)
        dropdown_options = {
            'variable': ['Variable1', 'Variable2', 'Variable3'],
            'dataset': ['Dataset1', 'Dataset2', 'Dataset3'],
            'country': ['Country1', 'Country2', 'Country3'],
            'model': ['Model1', 'Model2', 'Model3']
        }
        return render(request, 'chart.html', {'dropdown_options': dropdown_options})
    elif request.method == "POST":
        # Process uploaded Excel file
        excel_file = request.FILES.get('excel_file')
        if not excel_file:
            return JsonResponse({'error': 'No file uploaded'})

        # Load the Excel file
        wb = load_workbook(excel_file)
        ws = wb.active

        # Read the data from Excel into a DataFrame
        excel_data = ws.values
        columns = next(excel_data)
        data = list(excel_data)
        df = pd.DataFrame(data, columns=columns)

        # Get selected dropdown values
        variable = request.POST.get('variable_select')
        dataset = request.POST.get('dataset_select')
        country = request.POST.get('country_select')
        model = request.POST.get('model_select')

        # Example: Generate random data for demonstration purposes
        data = [random.randint(1, 100) for _ in range(10)]
        labels = [str(2020 + i) for i in range(10)]

        return JsonResponse({'labels': labels, 'data': data})

















from django.shortcuts import render
from django.http import HttpResponseRedirect
from openpyxl import load_workbook

def upload_file(request):
    if request.method == 'POST' and request.FILES['excel_file']:
        excel_file = request.FILES['excel_file']
        wb = load_workbook(excel_file)
        ws = wb.active
        data = [[cell.value for cell in row] for row in ws.iter_rows(values_only=True)]
        # Store data in session or database for use in dashboard
        request.session['data'] = data
        return HttpResponseRedirect('/dashboard/')
    return render(request, 'chart.html')

def dashboard(request):
    data = request.session.get('data', [])
    # You can process the data and pass it to the template for rendering
    return render(request, 'dashboard.html', {'data': data})



































from django.shortcuts import render
import openpyxl
import pandas as pd
import json

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        context = {
            'variable_options': variable_options,
            'country_options': country_options,
            'model_options': model_options,
            'data': json.loads(df.to_json(orient='records'))
        }

        return render(request, 'myapp/dashboard.html', context)








































from django.shortcuts import render
import openpyxl
import pandas as pd
import json

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        context = {
            'variable_options': variable_options,
            'country_options': country_options,
            'model_options': model_options,
            'data': json.loads(df.to_json(orient='records'))
        }

        return render(request, 'myapp/dashboard.html', context)

def dashboard(request):
    return render(request, 'myapp/dashboard.html')







































<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        #chart {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <h1>Interactive Dashboard</h1>

    <div id="chart"></div>

    <script>
        var data = JSON.parse('{{ data|safe }}');

        // Get the first row of data
        var firstRow = data[0];

        // Extract the years from the column names
        var years = Object.keys(firstRow).filter(function(key) {
            return !isNaN(parseInt(key));
        });

        // Create the trace for the line chart
        var trace = {
            x: years,
            y: years.map(function(year) {
                return firstRow[year];
            }),
            type: 'line',
            mode: 'lines+markers'
        };

        // Create the layout
        var layout = {
            title: firstRow['Variable'] + ' for ' + firstRow['Region'] + ' (' + firstRow['Model'] + ')',
            xaxis: {
                title: 'Year'
            },
            yaxis: {
                title: firstRow['Variable']
            }
        };

        // Plot the data
        Plotly.newPlot('chart', [trace], layout);
    </script>
</body>
</html>