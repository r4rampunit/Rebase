from django.shortcuts import render, redirect
from django.http import JsonResponse
import openpyxl
import pandas as pd

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/index.html', {})
    elif request.method == "POST":
        excel_file = request.FILES.get("excel_file")
        if excel_file:
            wb = openpyxl.load_workbook(excel_file)
            worksheet = wb.active

            excel_data = []
            for row in worksheet.iter_rows(values_only=True):
                excel_data.append(row)

            # Convert excel_data to a pandas DataFrame
            df = pd.DataFrame(excel_data[1:], columns=excel_data[0])

            # Store the DataFrame in session
            request.session['df'] = df.to_dict()

            return redirect('myapp:dashboard')
        else:
            return render(request, 'myapp/index.html', {"error": "No file uploaded"})

def dashboard(request):
    df_dict = request.session.get('df')
    if not df_dict:
        return redirect('myapp:index')

    dropdown_options = {
        'variable': list(df_dict.keys()),
        'dataset': ['Dataset1', 'Dataset2', 'Dataset3'],
        'country': ['Country1', 'Country2', 'Country3'],
        'model': ['Model1', 'Model2', 'Model3']
    }

    return render(request, 'myapp/dashboard.html', {'dropdown_options': dropdown_options})

































from django.shortcuts import render
from django.http import JsonResponse
import pandas as pd
from openpyxl import load_workbook
import random

def chart(request):
    if request.method == "GET":
        # Initialize dropdown options (replace with actual data)
        dropdown_options = {
            'variable': ['Variable1', 'Variable2', 'Variable3'],
            'dataset': ['Dataset1', 'Dataset2', 'Dataset3'],
            'country': ['Country1', 'Country2', 'Country3'],
            'model': ['Model1', 'Model2', 'Model3']
        }
        return render(request, 'chart.html', {'dropdown_options': dropdown_options})
    elif request.method == "POST":
        # Process uploaded Excel file
        excel_file = request.FILES.get('excel_file')
        if not excel_file:
            return JsonResponse({'error': 'No file uploaded'})

        # Load the Excel file
        wb = load_workbook(excel_file)
        ws = wb.active

        # Read the data from Excel into a DataFrame
        excel_data = ws.values
        columns = next(excel_data)
        data = list(excel_data)
        df = pd.DataFrame(data, columns=columns)

        # Get selected dropdown values
        variable = request.POST.get('variable_select')
        dataset = request.POST.get('dataset_select')
        country = request.POST.get('country_select')
        model = request.POST.get('model_select')

        # Example: Generate random data for demonstration purposes
        data = [random.randint(1, 100) for _ in range(10)]
        labels = [str(2020 + i) for i in range(10)]

        return JsonResponse({'labels': labels, 'data': data})

















from django.shortcuts import render
from django.http import HttpResponseRedirect
from openpyxl import load_workbook

def upload_file(request):
    if request.method == 'POST' and request.FILES['excel_file']:
        excel_file = request.FILES['excel_file']
        wb = load_workbook(excel_file)
        ws = wb.active
        data = [[cell.value for cell in row] for row in ws.iter_rows(values_only=True)]
        # Store data in session or database for use in dashboard
        request.session['data'] = data
        return HttpResponseRedirect('/dashboard/')
    return render(request, 'chart.html')

def dashboard(request):
    data = request.session.get('data', [])
    # You can process the data and pass it to the template for rendering
    return render(request, 'dashboard.html', {'data': data})



































from django.shortcuts import render
import openpyxl
import pandas as pd
import json

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        context = {
            'variable_options': variable_options,
            'country_options': country_options,
            'model_options': model_options,
            'data': json.loads(df.to_json(orient='records'))
        }

        return render(request, 'myapp/dashboard.html', context)








































from django.shortcuts import render
import openpyxl
import pandas as pd
import json

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        context = {
            'variable_options': variable_options,
            'country_options': country_options,
            'model_options': model_options,
            'data': json.loads(df.to_json(orient='records'))
        }

        return render(request, 'myapp/dashboard.html', context)

def dashboard(request):
    return render(request, 'myapp/dashboard.html')







































<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        #chart {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <h1>Interactive Dashboard</h1>

    <div id="chart"></div>

    <script>
        var data = JSON.parse('{{ data|safe }}');

        // Get the first row of data
        var firstRow = data[0];

        // Extract the years from the column names
        var years = Object.keys(firstRow).filter(function(key) {
            return !isNaN(parseInt(key));
        });

        // Create the trace for the line chart
        var trace = {
            x: years,
            y: years.map(function(year) {
                return firstRow[year];
            }),
            type: 'line',
            mode: 'lines+markers'
        };

        // Create the layout
        var layout = {
            title: firstRow['Variable'] + ' for ' + firstRow['Region'] + ' (' + firstRow['Model'] + ')',
            xaxis: {
                title: 'Year'
            },
            yaxis: {
                title: firstRow['Variable']
            }
        };

        // Plot the data
        Plotly.newPlot('chart', [trace], layout);
    </script>
</body>
</html>




































<!DOCTYPE html>
<html>
<head>
    <title>Test Plot</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <div id="myPlot"></div>
    <script>
        var trace1 = {
            x: [1, 2, 3, 4],
            y: [10, 15, 13, 17],
            mode: 'markers'
        };

        var trace2 = {
            x: [2, 3, 4, 5],
            y: [16, 5, 11, 9],
            mode: 'lines'
        };

        var trace3 = {
            x: [1, 2, 3, 4],
            y: [12, 9, 15, 12],
            mode: 'lines+markers'
        };

        var data = [trace1, trace2, trace3];

        var layout = {
            title: 'Test Plot',
            xaxis: {
                title: 'X-Axis'
            },
            yaxis: {
                title: 'Y-Axis'
            }
        };

        Plotly.newPlot('myPlot', data, layout);
    </script>
</body>
</html>











from django.shortcuts import render, redirect
import openpyxl
import pandas as pd
import json

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        request.session['data'] = json.loads(df.to_json(orient='records'))
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options

        return redirect('myapp:dashboard')

def dashboard(request):
    context = {
        'variable_options': request.session.get('variable_options', []),
        'country_options': request.session.get('country_options', []),
        'model_options': request.session.get('model_options', []),
        'data': request.session.get('data', [])
    }
    return render(request, 'myapp/dashboard.html', context)






































from django.shortcuts import render, redirect
import openpyxl
import pandas as pd
import json
import plotly.graph_objs as go

def index(request):
    if request.method == "GET":
        return render(request, 'myapp/chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        request.session['data'] = json.loads(df.to_json(orient='records'))
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options

        return redirect('myapp:dashboard')

def dashboard(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    # Default values for the dropdown selections
    selected_variable = variable_options[0] if variable_options else ''
    selected_country = country_options[0] if country_options else ''
    selected_model = model_options[0] if model_options else ''

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        plot_data = [trace]
        plot_div = go.offline.plot(plot_data, layout, output_type='div')
    else:
        plot_div = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'plot_div': plot_div
    }

    return render(request, 'myapp/dashboard.html', context)


from django.http import HttpResponse
import plotly.graph_objs as go

def update_plot(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else '')
    selected_country = request.GET.get('country', country_options[0] if country_options else '')
    selected_model = request.GET.get('model', model_options[0] if model_options else '')

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        plot_data = [trace]
        plot_div = go.offline.plot(plot_data, layout, output_type='div')
        return HttpResponse(plot_div)
    else:
        return HttpResponse('No data found for the selected combination.')




































from django.shortcuts import render, redirect
import openpyxl
import pandas as pd
import json
import plotly.graph_objs as go
from plotly.io import to_html

def index(request):
    # ... (same as before)

def dashboard(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    # Default values for the dropdown selections
    selected_variable = variable_options[0] if variable_options else ''
    selected_country = country_options[0] if country_options else ''
    selected_model = model_options[0] if model_options else ''

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for row in filtered_data for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        plot_data = [trace]
        plot_div = to_html(plot_data, layout)
    else:
        plot_div = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'plot_div': plot_div
    }

    return render(request, 'myapp/dashboard.html', context)

def update_plot(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else '')
    selected_country = request.GET.get('country', country_options[0] if country_options else '')
    selected_model = request.GET.get('model', model_options[0] if model_options else '')

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for row in filtered_data for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        plot_data = [trace]
        plot_div = to_html(plot_data, layout)
        return HttpResponse(plot_div)
    else:
        return HttpResponse('No data found for the selected combination.')












import plotly.graph_objs as go
from plotly.io import to_html

def dashboard(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    # Default values for the dropdown selections
    selected_variable = variable_options[0] if variable_options else ''
    selected_country = country_options[0] if country_options else ''
    selected_model = model_options[0] if model_options else ''

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for row in filtered_data for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        fig = go.Figure(data=[trace], layout=layout)
        plot_div = to_html(fig, full_html=False)
    else:
        plot_div = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'plot_div': plot_div
    }

    return render(request, 'myapp/dashboard.html', context)

def update_plot(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else '')
    selected_country = request.GET.get('country', country_options[0] if country_options else '')
    selected_model = request.GET.get('model', model_options[0] if model_options else '')

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for row in filtered_data for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        fig = go.Figure(data=[trace], layout=layout)
        plot_div = to_html(fig, full_html=False)
        return HttpResponse(plot_div)
    else:
        return HttpResponse('No data found for the selected combination.')































from django.shortcuts import render, redirect, HttpResponse
import openpyxl
import pandas as pd
import json
from django.http import JsonResponse  # Use JsonResponse for AJAX responses
import plotly.graph_objs as go

def chart(request):
    if request.method == "GET":
        return render(request, 'chart.html', {})  # Render empty chart template
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active

        excel_data = list()
        for row in worksheet.iter_rows():
            row_data = list()
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])

        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        # Store data and options in session for accessibility across requests
        request.session['data'] = df.to_json(orient='records')
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options

        return redirect('dashboard')  # Redirect to dashboard after processing

def dashboard(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    # Get default or selected values from request parameters or session
    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    filtered_data = [row for row in json.loads(data) if
                     (row['Variable'] == selected_variable) and
                     (row['Region'] == selected_country) and
                     (row['Model'] == selected_model)]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()

        traces = []
        for scenario in ['BL', 'NZ', 'DT', 'OP']:
            trace = go.Scatter(
                x=years,
                y=[row[str(year)] for row in filtered_data for year in years if scenario in row[str(year)]],
                mode='lines+markers',
                name=scenario,
                marker=dict(color=get_scenario_color(scenario))  # Customize marker colors
            )
            traces.append(trace)

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country} ({selected_model})",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )

        fig = go.Figure(data=traces, layout=layout)
        plot_div = fig.to_html(full_html=False)  # Generate plot HTML without unnecessary elements
    else:
        plot_div = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'plot_div': plot_div
    }
    return render(request, 'dashboard.html', context)

def update_plot(request):  # AJAX endpoint for filtering
    if request.is_ajax():
        data = request.session.get('data', [])
        variable_options = request.session.get('variable_options', [])
        country_options = request.session.get('country_options', [])
        model_options = request.session.get('model_options', [])

        selected_variable = request.GET.













































from django.shortcuts import render
import openpyxl
import pandas as pd
import json
from django.http import HttpResponse
import plotly.graph_objs as go

def chart(request):
    if request.method == "GET":
        return render(request, 'chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = []
        for row in worksheet.iter_rows():
            row_data = []
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())
        request.session['data'] = json.loads(df.to_json(orient='records'))
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options
        return redirect('dashboard')

def dashboard(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()
        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for row in filtered_data for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )
        layout = go.Layout(title=f"{selected_variable} for {selected_country} ({selected_model})", xaxis=dict(title='Year'), yaxis=dict(title=selected_variable))
        fig = go.Figure(data=[trace], layout=layout)
        plot_div = fig.to_html(full_html=False)
    else:
        plot_div = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'selected_variable': selected_variable,
        'selected_country': selected_country,
        'selected_model': selected_model,
        'plot_div': plot_div
    }

    return render(request, 'dashboard.html', context)

def update_plot(request):
    data = request.session.get('data', [])
    selected_variable = request.GET.get('variable')
    selected_country = request.GET.get('country')
    selected_model = request.GET.get('model')

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Region'] == selected_country and row['Model'] == selected_model]

    if filtered_data:
        years = [int(key) for key in filtered_data[0].keys() if key.isdigit()]
        years.sort()
        trace = go.Scatter(
            x=years,
            y=[row[str(year)] for row in filtered_data for year in years],
            mode='lines+markers',
            name=f"{selected_variable} for {selected_country} ({selected_model})"
        )
        layout = go.Layout(title=f"{selected_variable} for {selected_country} ({selected_model})", xaxis=dict(title='Year'), yaxis=dict(title=selected_variable))
        fig = go.Figure(data=[trace], layout=layout)
        plot_div = fig.to_html(full_html=False)
        return HttpResponse(plot_div)
    else:
        return HttpResponse("No data found for the selected combination")

































from django.shortcuts import render, redirect
import pandas as pd
import plotly.graph_objs as go

def chart(request):
    if request.method == "GET":
        return render(request, 'chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        df = pd.read_excel(excel_file)
        variable_options = df['Variable'].unique().tolist()
        country_options = df['Country'].unique().tolist()
        model_options = df['Model'].unique().tolist()
        request.session['data'] = df.to_dict(orient='records')
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options
        return redirect('dashboard')

def dashboard(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Country'] == selected_country]

    if filtered_data:
        years = [int(col) for col in filtered_data[0].keys() if col.isdigit()]
        years.sort()

        # Create traces for each scenario
        traces = []
        for model in model_options:
            trace = go.Scatter(
                x=years,
                y=[row[str(year)] for row in filtered_data if row['Model'] == model],
                mode='lines+markers',
                name=model
            )
            traces.append(trace)

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country}",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )
        fig = go.Figure(data=traces, layout=layout)
        plot_div = fig.to_html(full_html=False)
    else:
        plot_div = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'selected_variable': selected_variable,
        'selected_country': selected_country,
        'selected_model': selected_model,
        'plot_div': plot_div
    }

    return render(request, 'dashboard.html', context)

def update_plot(request):
    data = request.session.get('data', [])
    selected_variable = request.GET.get('variable')
    selected_country = request.GET.get('country')

    filtered_data = [row for row in data if row['Variable'] == selected_variable and row['Country'] == selected_country]

    if filtered_data:
        years = [int(col) for col in filtered_data[0].keys() if col.isdigit()]
        years.sort()

        traces = []
        for model in model_options:
            trace = go.Scatter(
                x=years,
                y=[row[str(year)] for row in filtered_data if row['Model'] == model],
                mode='lines+markers',
                name=model
            )
            traces.append(trace)

        layout = go.Layout(
            title=f"{selected_variable} for {selected_country}",
            xaxis=dict(title='Year'),
            yaxis=dict(title=selected_variable)
        )
        fig = go.Figure(data=traces, layout=layout)
        plot_div = fig.to_html(full_html=False)
        return HttpResponse(plot_div)
    else:
        return HttpResponse("No data found for the selected combination")
