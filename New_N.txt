from django.shortcuts import render, redirect
import openpyxl
import pandas as pd
import json
from django.http import HttpResponse
import plotly.graph_objs as go
from plotly.offline import plot
from django.shortcuts import render
import pandas as pd
import plotly.graph_objs as go
from plotly.offline import plot
from collections import deque

def chart(request):
    if request.method == "GET":
        return render(request, 'chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = []
        for row in worksheet.iter_rows():
            row_data = []
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Region'].unique().tolist())  # Ensure correct column name
        model_options = sorted(df['Model'].unique().tolist())

        request.session['data'] = json.loads(df.to_json(orient='records'))
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options

        return redirect('dashboard')

from django.shortcuts import render
import pandas as pd
import plotly.graph_objs as go
from plotly.offline import plot


from django.shortcuts import render
import pandas as pd
import plotly.graph_objs as go
from plotly.offline import plot


def dashboard(request):
    data = request.session.get("data", [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    # Convert data to DataFrame
    df = pd.DataFrame(data)

    # Filter the DataFrame based on selected filters
    filtered_data = df[(df['Variable'] == selected_variable) &
                      (df['Region'] == selected_country) &
                      (df['Model'] == selected_model)]

    if not filtered_data.empty:  # Check if filtered_data is not empty
        # Filter the DataFrame to keep only rows with unique scenarios
        unique_scenarios = filtered_data['Scenario'].unique()
        filtered_data_unique = filtered_data.drop_duplicates(subset=['Scenario'])

        # Convert the filtered DataFrame to a dictionary of records
        filtered_data_dict = filtered_data_unique.to_dict('records')
    else:
        filtered_data_dict = []

    if not filtered_data.empty:  # Check if filtered_data is not empty


        years = ['2005', '2010', '2015', '2020', '2025', '2030', '2035', '2040', '2045', '2050']
        traces = []

        for scenario, scenario_data in filtered_data.groupby('Scenario'):
            trace = go.Scatter(
                x=years,
                y=scenario_data[years].values.flatten(),
                mode='lines+markers',
                name=scenario
            )
            traces.append(trace)

        # Create the multiline plot
        layout = go.Layout(
            title='Yearly Plot',
            xaxis=dict(title='Year'),
            yaxis=dict(title='Value')
        )

        fig_single = go.Figure(data=traces, layout=layout)

        plot_div_single = plot(fig_single, output_type='div', include_plotlyjs=False)
    else:
        plot_div_single = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'selected_variable': selected_variable,
        'selected_country': selected_country,
        'selected_model': selected_model,
        'filtered_data': filtered_data_dict, # Convert DataFrame to list of dictionaries
        'plot_div_single': plot_div_single,
    }

    return render(request, 'dashboard.html', context)














<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <!-- Plotly.js -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Dashboard</h1>
    <form action="{% url 'dashboard' %}" method="get">
        <label for="variable">Variable:</label>
        <select name="variable" id="variable">
            {% for option in variable_options %}
                <option value="{{ option }}" {% if option == selected_variable %}selected{% endif %}>{{ option }}</option>
            {% endfor %}
        </select>
        <br>
        <label for="country">Country:</label>
        <select name="country" id="country">
            {% for option in country_options %}
                <option value="{{ option }}" {% if option == selected_country %}selected{% endif %}>{{ option }}</option>
            {% endfor %}
        </select>
        <br>
        <label for="model">Model:</label>
        <select name="model" id="model">
            {% for option in model_options %}
                <option value="{{ option }}" {% if option == selected_model %}selected{% endif %}>{{ option }}</option>
            {% endfor %}
        </select>
        <br>
        <input type="submit" value="Submit">
    </form>

    {% if plot_div_single %}
        {{ plot_div_single|safe }}
    {% endif %}

    {% if filtered_data %}
        <h2>Data</h2>
        <table>
            <thead>
                <tr>
                    {% for column in filtered_data.0.keys %}
                        <th>{{ column }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
                {% for row in filtered_data %}
                    <tr>
                        {% for value in row.values %}
                            <td>{{ value }}</td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No data available for the selected options.</p>
    {% endif %}
</body>
</html>