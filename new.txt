from django.shortcuts import render, redirect
import openpyxl
import pandas as pd
import json
from django.http import HttpResponse
import plotly.graph_objs as go
from plotly.offline import plot

def chart(request):
    if request.method == "GET":
        return render(request, 'chart.html', {})
    else:
        excel_file = request.FILES["excel_file"]
        wb = openpyxl.load_workbook(excel_file)
        worksheet = wb.active
        excel_data = []
        for row in worksheet.iter_rows():
            row_data = []
            for cell in row:
                row_data.append(cell.value)
            excel_data.append(row_data)

        df = pd.DataFrame(excel_data[1:], columns=excel_data[0])
        variable_options = sorted(df['Variable'].unique().tolist())
        country_options = sorted(df['Scenario Region'].unique().tolist())
        model_options = sorted(df['Model'].unique().tolist())

        request.session['data'] = json.loads(df.to_json(orient='records'))
        request.session['variable_options'] = variable_options
        request.session['country_options'] = country_options
        request.session['model_options'] = model_options

        return redirect('dashboard')

def dashboard(request):
    data = request.session.get("data", [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    filtered_data = [row for row in data if row['Variable'] == selected_variable and
                     row['Scenario Region'] == selected_country and
                     row['Model'] == selected_model]

    if filtered_data:
        years = [int(year) for year in filtered_data[0].keys() if year.isdigit()]
        years.sort()

        trace_single = go.Scatter(x=years, y=[row[str(year)] for row in filtered_data],
                                   mode='lines+markers',
                                   name=f"{selected_variable} for {selected_country} ({selected_model})")

        traces_multi = []
        unique_scenarios = df['Scenario'].unique()
        for scenario in unique_scenarios:
            scenario_data = [row for row in filtered_data if row['Scenario'] == scenario]
            traces_multi.append(go.Scatter(x=years, y=[row[str(year)] for row in scenario_data],
                                           mode='lines+markers',
                                           name=f"{selected_variable} for {selected_country} ({selected_model}) ({scenario})"))

        layout = go.Layout(title=f"{selected_variable} for {selected_country} ({selected_model})",
                           xaxis=dict(title="Year"),
                           yaxis=dict(title=selected_variable))

        fig_single = go.Figure(data=[trace_single], layout=layout)
        fig_multi = go.Figure(data=traces_multi, layout=layout)

        plot_div_single = plot(fig_single, output_type='div', include_plotlyjs=False)
        plot_div_multi = plot(fig_multi, output_type='div', include_plotlyjs=False)

    else:
        plot_div_single = None
        plot_div_multi = None

    context = {
        'variable_options': variable_options,
        'country_options': country_options,
        'model_options': model_options,
        'plot_div_single': plot_div_single,
        'plot_div_multi': plot_div_multi,
    }

    return render(request, 'dashboard.html', context)

def update_plot(request):
    data = request.session.get('data', [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    filtered_data = [row for row in data if row['Variable'] == selected_variable and
                     row['Scenario Region'] == selected_country and
                     row['Model'] == selected_model]

    if filtered_data:
        years = [int(year) for year in filtered_data[0].keys() if year.isdigit()]
        years.sort()

        trace_single = go.Scatter(x=years, y=[row[str(year)] for row in filtered_data],
                                   mode='lines+markers',
                                   name=f"{selected_variable} for {selected_country} ({selected_model})")

        traces_multi = []
        unique_scenarios = df['Scenario'].unique()
        for scenario in unique_scenarios:
            scenario_data = [row for row in filtered_data if row['Scenario'] == scenario]
            traces_multi.append(go.Scatter(x=years, y=[row[str(year)] for row in scenario_data],
                                           mode='lines+markers',
                                           name=f"{selected_variable} for {selected_country} ({selected_model}) ({scenario})"))

        layout = go.Layout(title=f"{selected_variable} for {selected_country} ({selected_model})",
                           xaxis=dict(title="Year"),
                           yaxis=dict(title=selected_variable))

        fig_single = go.Figure(data=[trace_single], layout=layout)
        fig_multi = go.Figure(data=traces_multi, layout=layout)

        plot_div_single = plot(fig_single, output_type='div', include_plotlyjs=False)
        plot_div_multi = plot(fig_multi, output_type='div', include_plotlyjs=False)

        response = {
            'plot_div_single': plot_div_single,
            'plot_div_multi': plot_div_multi
        }

        return HttpResponse(json.dumps(response), content_type='application/json')
    else:
        return HttpResponse("No data found for the selected combination")
