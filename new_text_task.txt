<body>
    <div class="logo-container"></div>
    <h1>MI Tool Visualization</h1>
    <div class="dashboard-container">
        <div class="dropdown-container">
            <select name="folder" id="folder">
                <option value="">Select Variable</option>
                {% for folder in folders %}
                    <option value="{{ folder }}" {% if folder == selected_folder %}selected{% endif %}>{{ folder }}</option>
                {% endfor %}
            </select>
        </div>
        {% if selected_folder %}
            <h2>Selected Folder: {{ selected_folder }}</h2>
        {% endif %}
        {% if dataframes %}
            <h2>Data from Excel Files</h2>
            {% for df_name, df in dataframes.items %}
                <h3>{{ df_name }}</h3>
                <p>Columns: {{ df.columns|join:", " }}</p>
                <p>Rows: {{ df.shape.0 }}</p>
                <table border="1">
                    <thead>
                        <tr>
                            {% for col in df.columns %}
                                <th>{{ col }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for _, row in df.iterrows %}
                            {% if forloop.first %}
                                <tr>
                                    {% for cell in row %}
                                        <td>{{ cell }}</td>
                                    {% endfor %}
                                </tr>
                            {% endif %}
                        {% endfor %}
                    </tbody>
                </table>
            {% endfor %}
        {% else %}
            <p>No data to display</p>
        {% endif %}
    </div>

    <script>
        document.getElementById('folder').addEventListener('change', function() {
            window.location.href = '?folder=' + this.value;
        });
    </script>
</body>










import os
from django.shortcuts import render
import pandas as pd

FOLDER_PATH = r"C:\Users\45363901\MI Tool Visualization\punitproject\Folder"

def get_folders():
    folders = [f.name for f in os.scandir(FOLDER_PATH) if f.is_dir()]
    print("Folders:", folders)  # Debug print
    return folders

def read_excel_files(folder_name):
    folder_path = os.path.join(FOLDER_PATH, folder_name)
    print(f"Looking for Excel files in: {folder_path}")  # Debug print
    excel_files = [f for f in os.listdir(folder_path) if f.endswith('.xlsx')]
    print(f"Excel files found: {excel_files}")  # Debug print
    dataframes = {}
    for excel_file in excel_files:
        file_path = os.path.join(folder_path, excel_file)
        print(f"Attempting to read: {file_path}")  # Debug print
        try:
            df = pd.read_excel(file_path)
            dataframes[excel_file] = df
            print(f"Successfully read {excel_file}")  # Debug print
        except Exception as e:
            print(f"Error reading {excel_file}: {str(e)}")  # Debug print
    return dataframes

def dashboard(request):
    folders = get_folders()
    selected_folder = request.GET.get('folder')
    dataframes = {}

    print(f"Selected folder: {selected_folder}")  # Debug print

    if selected_folder:
        print(f"Attempting to read files from: {os.path.join(FOLDER_PATH, selected_folder)}")  # Debug print
        dataframes = read_excel_files(selected_folder)

    print(f"Dataframes: {dataframes.keys()}")  # Debug print

    context = {
        'folders': folders,
        'dataframes': dataframes,
        'selected_folder': selected_folder,
    }

    return render(request, 'dashboard.html', context)












import openpyxl
import pandas as pd

def add_output_columns(sheet):
    # Implement this function as needed
    # It should return a pandas DataFrame
    pass

def filter_dataframe(df):
    # List of columns to keep
    columns_to_keep = [
        'Country', 'ISOCODES', 'date', 'CPI', 'GDP', 'GDP_SA', 'PCOM', 'PH', 'PH_DUBAI',
        'RLG', 'RBASE', 'RFED', 'RLEND', 'RLPR', 'UP', 'UPILO', 'WPO', 'WPO_WTI'
    ]

    # List of ISOCODES to keep
    isocodes_to_keep = ['ARE', 'CAN', 'CHN', 'FRA', 'GBL', 'GBR', 'HKG', 'MEX', 'USA']

    # Filter the dataframe
    filtered_df = df[df['ISOCODES'].isin(isocodes_to_keep)][columns_to_keep]

    return filtered_df

input_file = r".\Input\Data Copy.xlsx"
workbook = openpyxl.load_workbook(input_file)
sheetNames = workbook.sheetnames
All = []

for sheet in sheetNames:
    df = add_output_columns(sheet)
    filtered_df = filter_dataframe(df)
    All.append(filtered_df)

# Now 'All' contains a list of filtered DataFrames
















import os
from django.shortcuts import render
import pandas as pd

FOLDER_PATH = r'C:\Users\45363901\MI_Tool_Visualization\punitproject\Folder_'

def get_folders():
    return [f.name for f in os.scandir(FOLDER_PATH) if f.is_dir()]

def get_subfolders(folder_name):
    folder_path = os.path.join(FOLDER_PATH, folder_name)
    return [f.name for f in os.scandir(folder_path) if f.is_dir()]

def read_excel_files(folder_name, subfolder_name):
    folder_path = os.path.join(FOLDER_PATH, folder_name, subfolder_name)
    excel_files = [f for f in os.listdir(folder_path) if f.endswith('.xlsx')]
    dataframes = {}
    for excel_file in excel_files:
        file_path = os.path.join(folder_path, excel_file)
        df = pd.read_excel(file_path)
        dataframes[excel_file] = df
    return dataframes

def dashboard(request):
    folders = get_folders()
    selected_folder = request.GET.get("folder", None)
    selected_subfolder = request.GET.get("subfolder", None)
    subfolders = get_subfolders(selected_folder) if selected_folder else []
    dataframes = {}

    if selected_folder and selected_subfolder:
        dataframes = read_excel_files(selected_folder, selected_subfolder)

    context = {
        'folders': folders,
        'subfolders': subfolders,
        'dataframes': dataframes,
        'selected_folder': selected_folder,
        'selected_subfolder': selected_subfolder,
    }
    return render(request, 'dashboard.html', context)





<body>
    <div class="logo-container"></div>
    <h1>MI Tool Visualization</h1>
    <div class="dashboard-container">
        <div class="dropdown-container">
            <select name="folder" id="folder">
                <option value="">Select Folder</option>
                {% for folder in folders %}
                    <option value="{{ folder }}" {% if folder == selected_folder %}selected{% endif %}>{{ folder }}</option>
                {% endfor %}
            </select>

            <select name="subfolder" id="subfolder">
                <option value="">Select Subfolder</option>
                {% for subfolder in subfolders %}
                    <option value="{{ subfolder }}" {% if subfolder == selected_subfolder %}selected{% endif %}>{{ subfolder }}</option>
                {% endfor %}
            </select>
        </div>

        {% if selected_folder and selected_subfolder %}
            <h2>Selected Folder: {{ selected_folder }} / {{ selected_subfolder }}</h2>
        {% endif %}

        {% if dataframes %}
            <h2>Data from Excel Files</h2>
            {% for df_name, df in dataframes.items %}
                <h3>{{ df_name }}</h3>
                <p>Columns: {{ df.columns|join:", " }}</p>
                <p>Rows: {{ df.shape.0 }}</p>
                <table border="1">
                    <thead>
                        <tr>
                            {% for col in df.columns %}
                                <th>{{ col }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for _, row in df.iterrows %}
                            {% if forloop.first %}
                                <tr>
                                    {% for cell in row %}
                                        <td>{{ cell }}</td>
                                    {% endfor %}
                                </tr>
                            {% endif %}
                        {% endfor %}
                    </tbody>
                </table>
            {% endfor %}
        {% else %}
            <p>No data to display</p>
        {% endif %}
    </div>

    <script>
        document.getElementById('folder').addEventListener('change', function() {
            window.location.href = '?folder=' + this.value;
        });

        document.getElementById('subfolder').addEventListener('change', function() {
            const folder = document.getElementById('folder').value;
            window.location.href = '?folder=' + folder + '&subfolder=' + this.value;
        });
    </script>
</body>













<style>
    .dropdown-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }
    .dropdown-container select {
        width: 48%;
    }
</style>

.dropdown-wrapper {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.dropdown-container {
    width: 48%; /* Adjust as needed */
}

.dropdown-container select {
    font-size: 18px;
    padding: 10px 20px;
    border-radius: 20px;
    background-color: #ffccbb;
    color: #333;
    font-weight: bold;
    border: none;
    outline: none;
    width: 100%;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.dropdown-container.left {
    /* Additional styles for left dropdown if needed */
}

.dropdown-container.right {
    /* Additional styles for right dropdown if needed */
}
