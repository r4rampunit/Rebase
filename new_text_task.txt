from openpyxl.formatting.rule import ColorScaleRule
import numpy as np
from openpyxl import load_workbook

def conditional_formatting_IFRS1Q(sheet):
    for row in sheet.iter_rows():
        for cell in row:
            if cell.value == '5yr Avg':
                # Define ranges for max, min, and average values
                max_value_range = sheet.iter_rows(min_row=cell.row + 18, max_row=cell.row + 21, min_col=cell.column + 1, max_col=cell.column + 4)
                min_value_range = sheet.iter_rows(min_row=cell.row + 18, max_row=cell.row + 21, min_col=cell.column + 1, max_col=cell.column + 4)
                avg_value_range = sheet.iter_rows(min_row=cell.row + 2, max_row=cell.row + 5, min_col=cell.column + 2, max_col=cell.column + 2)

                # Extract values from the ranges
                max_values = [c.value for r in max_value_range for c in r if isinstance(c.value, (int, float))]
                min_values = [c.value for r in min_value_range for c in r if isinstance(c.value, (int, float))]
                avg_values = [c.value for r in avg_value_range for c in r if isinstance(c.value, (int, float))]

                # Compute max, min, and average values
                max_value = max(max_values) if max_values else None
                min_value = min(min_values) if min_values else None
                avg_value = np.mean(avg_values) if avg_values else None

                # Skip if any value is not found
                if max_value is None or min_value is None or avg_value is None:
                    continue

                # Define the data range for conditional formatting
                data_range = f'{sheet.cell(row=cell.row + 12, column=cell.column + 1).coordinate}:{sheet.cell(row=cell.row + 11, column=cell.column + 4).coordinate}'

                # Define color scale rule
                min_color = 'FFCCCC'
                mid_color = 'FFFFFF'
                max_color = 'CCFFCC'

                rule = ColorScaleRule(start_type='min', start_value=min_value, start_color=min_color,
                                      mid_type='num', mid_value=avg_value, mid_color=mid_color,
                                      end_type='max', end_value=max_value, end_color=max_color)

                # Apply conditional formatting rule
                sheet.conditional_formatting.add(data_range, rule)

# Example usage
wb = load_workbook('your_workbook.xlsx')
sheet = wb['Sheet1']
conditional_formatting_IFRS1Q(sheet)
wb.save('your_workbook_with_formatting.xlsx')
















from openpyxl import load_workbook
from openpyxl.formatting.rule import ColorScaleRule
import numpy as np

def conditional_formatting_IFRS1Q(sheet):
    for row in sheet.iter_rows():
        for cell in row:
            if cell.value == '5yr Avg':
                max_value_range = sheet.iter_rows(min_row=cell.row + 18, max_row=cell.row + 21, min_col=cell.column + 1, max_col=cell.column + 4)
                min_value_range = sheet.iter_rows(min_row=cell.row + 18, max_row=cell.row + 21, min_col=cell.column + 1, max_col=cell.column + 4)
                avg_value_range = sheet.iter_rows(min_row=cell.row + 2, max_row=cell.row + 5, min_col=cell.column + 2, max_col=cell.column + 2)

                max_values = [c.value for r in max_value_range for c in r if isinstance(c.value, (int, float))]
                min_values = [c.value for r in min_value_range for c in r if isinstance(c.value, (int, float))]
                avg_values = [c.value for r in avg_value_range for c in r if isinstance(c.value, (int, float))]

                max_value = max(max_values) if max_values else None
                min_value = min(min_values) if min_values else None
                avg_value = np.mean(avg_values) if avg_values else None

                if max_value is None or min_value is None or avg_value is None:
                    print(f"Skipping cell at {cell.coordinate} due to missing value.")
                    continue

                data_range = f'{sheet.cell(row=cell.row + 12, column=cell.column + 1).coordinate}:{sheet.cell(row=cell.row + 15, column=cell.column + 4).coordinate}'

                min_color = 'FFCCCC'
                mid_color = 'FFFFFF'
                max_color = 'CCFFCC'

                rule = ColorScaleRule(start_type='num', start_value=min_value, start_color=min_color,
                                      mid_type='num', mid_value=avg_value, mid_color=mid_color,
                                      end_type='num', end_value=max_value, end_color=max_color)

                sheet.conditional_formatting.add(data_range, rule)
                print(f"Applied conditional formatting to range: {data_range}")

# Use context manager to ensure the file is properly closed after processing
file_path = 'your_workbook.xlsx'
output_file_path = 'your_workbook_with_formatting.xlsx'

with load_workbook(file_path) as wb:
    sheet = wb['Sheet1']
    conditional_formatting_IFRS1Q(sheet)
    wb.save(output_file_path)

print(f"Workbook saved successfully to {output_file_path}")










df = pd.DataFrame(data)
iso_dict = {}
for index, row in df.iterrows():
    iso_code = row['ISOCODES']
    check = row['Checks']

    if iso_code not in iso_dict:
        iso_dict[iso_code] = []

    iso_dict[iso_code].append(check)

for iso_code in iso_dict:
    iso_dict[iso_code] = tuple(iso_dict[iso_code])

















change_name(sheet):

This function is responsible for renaming the column headers in the given sheet based on the country code.
It uses a dictionary A that maps country codes to lists of column names.
It iterates over each row and cell in the sheet and checks if the cell value matches the country code.
If a match is found, it replaces the cell value with the corresponding column name from the list associated with that country code.


add_output_columns(sheet):

This function calculates additional columns based on the existing columns in the given sheet.
It reads the data from the sheet into a Pandas DataFrame df.
It calculates year-over-year (YoY) and quarter-over-quarter (QoQ) percentage changes for various columns (e.g., GDP, CPI, PH, PH_DUBAI, PCOM).
It rounds the calculated values to one decimal place and returns the updated DataFrame.


calculate_5year_avg(frame, Isocode, tzero_date, col):

This function calculates the 5-year average for a given column col and country code Isocode.
It finds the row in the DataFrame frame that matches the Isocode and tzero_date.
It then calculates the mean of the next 20 values (representing the 5-year period) for the specified column.
It returns the calculated 5-year average.


calculate_weights(df_table, Isocode):

This function calculates and assigns weights to the rows of the DataFrame df_table based on the country code Isocode.
It reads scenario weights from a mapping file and merges them with the DataFrame based on the country code.
It calculates the weighted sum of the values in specific columns using the scenario weights.
It updates the DataFrame df_table with the calculated weighted values.


construct_and_populate_tables(Isocode, tzero_date, col):

This function constructs and populates a table (DataFrame) with data for a given country code Isocode, time zero date tzero_date, and column col.
It initializes a DataFrame df_table with a predefined column structure.
It iterates over the data frames in the All list and populates the df_table with the corresponding values based on the country code and dates.
It calculates additional columns like the 5-year average and weighted values using helper functions.
It rounds the values in the DataFrame and returns the populated df_table.


format_sheet(sheet):

This function formats the given sheet by applying various formatting rules.
It rounds the numeric values to one decimal place.
It applies a specific font to all cells.
It applies white font color to certain named ranges.
It applies a light gray fill color to certain rows and columns.
It applies bold formatting to specific rows and columns.
It applies conditional formatting based on decimal patterns and fills cells with a light gray color accordingly.
It applies thin borders to all cells.
It applies red and blue fill colors to specific named ranges.



The remaining functions perform tasks like conditional formatting, date writing, handling formatting for specific scenarios (e.g., IFRS1Q_1, IFRS1Q_2, IFRS1Q_3, IFRS_FIRST_Q, IFRS4Q), and more.
The overall logic seems to involve reading data from various sources, performing calculations and transformations, constructing tables (DataFrames) with the processed data, and formatting the tables according to specific rules and requirements. The code appears to be tailored for a specific data processing and reporting workflow.

























from datetime import datetime
from dateutil import relativedelta

zero_date = "2024-03-31"
zero_date = datetime.strptime(zero_date, "%Y-%m-%d")

zero_date_1 = zero_date.replace(year=zero_date.year - 1)
start_date = datetime.strptime(str(zero_date_1), "%Y-%m-%d")

date1 = start_date

date2 = (date1 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date3 = (date2 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date4 = (date3 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date5 = (date4 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)

date6 = (date5 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date7 = (date6 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date8 = (date7 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date9 = (date8 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date10 = (date9 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)
date11 = (date10 + relativedelta(months=3)).replace(day=1) - relativedelta(months=1, days=-1)

dates = [
    date1.strftime("%d-%b-%y"), date2.strftime("%d-%b-%y"), date3.strftime("%d-%b-%y"), date4.strftime("%d-%b-%y"),
    date5.strftime("%d-%b-%y"), date6.strftime("%d-%b-%y"), date7.strftime("%d-%b-%y"), date8.strftime("%d-%b-%y"),
    date9.strftime("%d-%b-%y"), date10.strftime("%d-%b-%y"), date11.strftime("%d-%b-%y")
]
































import pandas as pd
from datetime import datetime, timedelta

# Read the data from the Excel file
data = pd.read_excel('mev-nz.xlsx')

# Create a list of unique country ISO codes
countries = data['ISOCODES'].unique().tolist()

# Create a list of column names for the dates
date_cols = [f"{d.strftime('%m/%d/%Y')}" for d in pd.date_range(start='12/31/2022', end='12/31/2052', freq='Q')]

# Create an empty DataFrame with the desired structure
mev_data = pd.DataFrame(index=data['GDP'].unique(), columns=['MEV Key', 'MEV Variable', 'Country ISO Code'] + date_cols + ['Region Mapped'])

# Iterate over each row in the original data
for row in data.itertuples(index=False):
    country = row.ISOCODES
    mev_key = row.GDP
    mev_var = row._fields[3]  # Assuming the variable name is in the 4th column

    # Create a new row in the mev_data DataFrame
    mev_data.loc[mev_key, 'MEV Key'] = mev_key
    mev_data.loc[mev_key, 'MEV Variable'] = mev_var
    mev_data.loc[mev_key, 'Country ISO Code'] = country

    # Get the start date and end date for the variable
    start_date = datetime(year=row.GDP_YR, month=1, day=1)
    end_date = start_date + timedelta(days=365)

    # Populate the values in the date columns
    for date_col in date_cols:
        date = datetime.strptime(date_col, '%m/%d/%Y')
        if start_date <= date < end_date:
            mev_data.loc[mev_key, date_col] = row._fields.index(mev_var)

# Write the data to a new Excel file
mev_data.to_excel('mev_data.xlsx', index=False)




















import pandas as pd
from datetime import datetime, timedelta

# Read the data from the Excel file
data = pd.read_excel('mev-nz.xlsx')

# Create a list of unique country ISO codes
countries = data['ISOCODES'].unique().tolist()

# Create a list of column names for the dates
date_cols = ['12/31/2022', '3/31/2023'] + [f"{d.strftime('%m/%d/%Y')}" for d in pd.date_range(start='6/30/2023', end='12/31/2052', freq='Q')]

# Create an empty DataFrame with the desired structure
mev_data = pd.DataFrame(columns=['MEV Key', 'MEV Variable', 'Country ISO Code'] + date_cols + ['Region Mapped'])

# Iterate over each row in the original data
for row in data.itertuples(index=False):
    country = row.ISOCODES
    mev_key = row.GDP
    mev_var = row._fields[3]  # Assuming the variable name is in the 4th column

    # Ensure GDP_YR can be converted to an integer, if not, skip this row
    try:
        gdp_year = int(row.GDP_YR)
        if gdp_year < 1:
            continue
    except (ValueError, TypeError):
        continue

    # Get the start date and end date for the variable
    start_date = datetime(year=gdp_year, month=1, day=1)
    end_date = start_date + timedelta(days=365)

    # Check if the key exists in mev_data, if not, add it
    if mev_key not in mev_data.index:
        mev_data.loc[mev_key] = [mev_key, mev_var, country] + [None] * (len(date_cols) + 1)

    # Populate the values in the date columns
    for date_col in date_cols:
        date = datetime.strptime(date_col, '%m/%d/%Y')
        if start_date <= date < end_date:
            if pd.isna(mev_data.loc[mev_key, date_col]):
                mev_data.loc[mev_key, date_col] = mev_var
            else:
                mev_data.loc[mev_key, date_col] = f"{mev_data.loc[mev_key, date_col]}, {mev_var}"

# Write the data to a new Excel file
mev_data.to_excel('mev_data.xlsx', index=False)

























import pandas as pd
from datetime import datetime, timedelta

# Read the data from the Excel file
data = pd.read_excel('mev-nz.xlsx')

# Create a list of unique country ISO codes
countries = data['ISOCODES'].unique().tolist()

# Create a list of column names for the dates
date_cols = ['3/31/2021', '6/30/2021', '9/30/2021', '12/31/2021', '3/31/2022', '6/30/2022', '9/30/2022', '12/31/2022', '3/31/2023'] + \
    [f"{d.strftime('%m/%d/%Y')}" for d in pd.date_range(start='6/30/2023', end='12/31/2052', freq='Q')]

# Create an empty DataFrame with the desired structure
mev_data = pd.DataFrame(columns=['MEV Key', 'MEV Variable', 'Country ISO Code', 'Region Mapped'] + date_cols)

# Iterate over each row in the original data
for row in data.itertuples(index=False):
    country = row.ISOCODES
    mev_key = row.GDP
    mev_var = row._fields[3]  # Assuming the variable name is in the 4th column

    # Ensure GDP_YR can be converted to an integer, if not, skip this row
    try:
        gdp_year = int(row.GDP_YR)
        if gdp_year < 1:
            continue
    except (ValueError, TypeError):
        continue

    # Get the start date and end date for the variable
    start_date = datetime(year=gdp_year, month=1, day=1)
    end_date = start_date + timedelta(days=365)

    # Check if the key exists in mev_data, if not, add it
    if mev_key not in mev_data.index:
        mev_data.loc[mev_key] = [mev_key, mev_var, country, None] + [None] * len(date_cols)

    # Populate the values in the date columns
    for date_col in date_cols:
        date = datetime.strptime(date_col, '%m/%d/%Y')
        if start_date <= date < end_date:
            if pd.isna(mev_data.loc[mev_key, date_col]):
                mev_data.loc[mev_key, date_col] = mev_var
            else:
                mev_data.loc[mev_key, date_col] = f"{mev_data.loc[mev_key, date_col]}, {mev_var}"

# Write the data to a new Excel file
mev_data.to_excel('mev_data.xlsx', index=False)















import pandas as pd
from datetime import datetime, timedelta

# Read the data from the Excel file
data = pd.read_excel('mev-nz.xlsx')

# Create a list of unique country ISO codes
countries = data['ISOCODES'].unique().tolist()

# Create a list of column names for the dates
date_cols = ['3/31/2021', '6/30/2021', '9/30/2021', '12/31/2021', '3/31/2022', '6/30/2022', '9/30/2022', '12/31/2022', '3/31/2023'] + [f"{d.strftime('%m/%d/%Y')}" for d in pd.date_range(start='6/30/2023', end='12/31/2052', freq='Q')]

# Create an empty DataFrame with the desired structure
mev_data = pd.DataFrame(columns=['MEV Key', 'MEV Variable', 'Country ISO Code', 'Region Mapped'] + date_cols)

# Iterate over each row in the original data
for _, row in data.iterrows():
    country = row['ISOCODES']
    mev_key = row['GDP']
    mev_var = row.iloc[3]  # Assuming the variable name is in the 4th column

    # Ensure GDP_YR can be converted to an integer, if not, skip this row
    try:
        gdp_year = int(row['GDP_YR'])
        if gdp_year < 1:
            continue
    except (ValueError, TypeError):
        continue

    # Get the start date and end date for the variable
    start_date = datetime(year=gdp_year, month=1, day=1)
    end_date = start_date + timedelta(days=365)

    # Check if the key exists in mev_data, if not, add it
    if mev_key not in mev_data.index:
        mev_data.loc[mev_key] = [mev_key, mev_var, country, None] + [None] * len(date_cols)

    # Populate the values in the date columns
    for date_col in date_cols:
        date = datetime.strptime(date_col, '%m/%d/%Y')
        if start_date <= date < end_date:
            if pd.isna(mev_data.loc[mev_key, date_col]):
                mev_data.loc[mev_key, date_col] = mev_var
            else:
                mev_data.loc[mev_key, date_col] = f"{mev_data.loc[mev_key, date_col]}, {mev_var}"

# Write the data to a new Excel file
mev_data.to_excel('mev_data.xlsx', index=False)

print(dates)