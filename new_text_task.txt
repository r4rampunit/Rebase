import json
import requests
import pandas as pd
import socket
import sys

def is_domain_reachable(domain):
    try:
        ip_address = socket.gethostbyname(domain)
        return f"Domain is reachable. IP address: {ip_address}"
    except socket.gaierror as e:
        return f"Domain is not reachable. Error: {e}"

# API details
domain = 'api.focus-ecofuntus.com'
token_url = f'https://{domain}/v1/token-exchange'
token_headers = {
    'Authorization': 'jwt eyJhbGciOIHsfggywunnhjswkncbjjsjXVCJ9.aWQiOiIdhhjjjd1ZjUwYmYzYzkyY2VkZDAWNTF1YWVjYjgiLCJ1bWFpbCI6ImRlbW9AZGVtby5hbsjbiuhdinewuh ININddhjwplannheijfadjbbxhjac wiurhghjajkqlwiuurfbvhhxbnskskwZjNhOGQwMmZjNWR1YzVmMzRlMjJhYzY2NzU@YzAiLCJpYXQ1OjE1OTkxMjczNTZ9.jMqLXN3vB90wm01_oky_VFuUoyABziqZ9z-02MufKng'
}

print(f"Checking if domain is reachable...")
reachable_result = is_domain_reachable(domain)
print(reachable_result)

try:
    print(f"Attempting to connect to {token_url}...")
    token_response = requests.post(token_url, headers=token_headers, timeout=10)

    if token_response is None:
        print("The token request returned None. This might indicate a network error.")
    else:
        print(f"Token response status code: {token_response.status_code}")
        print(f"Token response headers: {token_response.headers}")
        print(f"Token response content: {token_response.content}")

        token_response.raise_for_status()
        access_token = token_response.json()['accesstoken']

        clients_url = f'https://{domain}/v1/clients/'
        clients_headers = {
            'Authorization': f'Bearer {access_token}'
        }

        print(f"Fetching client data from {clients_url}...")
        clients_response = requests.get(clients_url, headers=clients_headers, timeout=10)

        if clients_response is None:
            print("The clients request returned None. This might indicate a network error.")
        else:
            print(f"Clients response status code: {clients_response.status_code}")
            print(f"Clients response headers: {clients_response.headers}")
            print(f"Clients response content: {clients_response.content}")

            clients_response.raise_for_status()
            clients_data = clients_response.json()
            df = pd.DataFrame(clients_data)
            print(df)

except requests.exceptions.RequestException as e:
    print(f"Request error: {e}")
    if hasattr(e, 'response') and e.response is not None:
        print(f"Response status code: {e.response.status_code}")
        print(f"Response headers: {e.response.headers}")
        print(f"Response content: {e.response.content}")
    else:
        print("No response object available. This might indicate a network error or timeout.")
except json.JSONDecodeError as e:
    print(f"JSON decode error: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

print("\nAdditional diagnostics:")
print(f"Python version: {sys.version}")
print(f"Requests library version: {requests.__version__}")
print(f"Pandas version: {pd.__version__}")















import sqlite3
import pandas as pd

# Use raw string for file path to avoid escape character issues
sqlite_file = r'C:\Users\45363901\PycharmProjects\Imp\Python-Environment\db\Test_db.sqlite'

# Connect to the database
conn = sqlite3.connect(sqlite_file)
cursor = conn.cursor()

# Get all table names
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()

print("List of tables:")
for table in tables:
    print(table[0])

# Function to check if a column exists in a table
def column_exists(cursor, table_name, column_name):
    cursor.execute(f"PRAGMA table_info('{table_name}')")
    columns = [col[1] for col in cursor.fetchall()]
    return column_name in columns

# Search for 'Colaro' column in all tables
column_name = 'Colaro'
found_in_tables = []

for table in tables:
    table_name = table[0]
    if column_exists(cursor, table_name, column_name):
        found_in_tables.append(table_name)

if found_in_tables:
    print(f"\nThe column '{column_name}' was found in the following tables:")
    for table in found_in_tables:
        print(table)
else:
    print(f"\nThe column '{column_name}' was not found in any table.")

# Close the connection
conn.close()