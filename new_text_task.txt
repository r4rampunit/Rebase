import pandas as pd
from openpyxl.styles import Font
from datetime import datetime
<<<<<<< HEAD
=======

def formatting_red_IFRS4Q(sheet):
    workbook_path = r".\Input\Mapping_File Copy.xlsx"
    data_edge = pd.read_excel(workbook_path, sheet_name="Data_Edge")
    red_font_color = 'FFFF0000'

    # Pre-process data_edge
    data_edge['ISOCODES'] = data_edge['ISOCODES'].astype(str)
    data_edge['Description'] = data_edge['Description'].astype(str)
    data_edge['Prev_Data_Edge'] = pd.to_datetime(data_edge['Prev_Data_Edge'])

    # Create a dictionary for faster lookup
    data_edge_dict = {(row['ISOCODES'], row['Description']): row['Prev_Data_Edge'] for _, row in data_edge.iterrows()}

    # Get all cell values at once
    all_cells = list(sheet.iter_rows(values_only=True))

    # Find the user_inputs[1] cells
    target_cells = [(row_idx, col_idx) for row_idx, row in enumerate(all_cells, 1) 
                    for col_idx, cell_value in enumerate(row, 1) if cell_value == user_inputs[1]]

    # Process date column once
    date_column = [cell[0] for cell in all_cells[3:24]]
    datetime_index = pd.to_datetime([date for date in date_column if date and date != ''], 
                                    format="%m/%d/%Y", errors='coerce')
    formatted_dates = [date.strftime('%Y-%m-%d') if pd.notnull(date) else None for date in datetime_index]

    for row, col in target_cells:
        isocodes = sheet.cell(row=row, column=col+8).value
        checks = sheet.cell(row=row-1, column=col+7).value

        prev_data_edge = data_edge_dict.get((str(isocodes), str(checks)))
        if prev_data_edge is None:
            continue

        prev_data_edge_str = prev_data_edge.strftime('%Y-%m-%d')
        if prev_data_edge_str not in formatted_dates:
            continue

        row_matched_with_date = formatted_dates.index(prev_data_edge_str) + 4

        range_to_change_font_color = sheet[
            sheet.cell(row=row+3, column=col).coordinate:
            sheet.cell(row=row_matched_with_date, column=col+5).coordinate
        ]

        new_font = Font(color=red_font_color, italic=True, name='Univers Next for HSBC Light')
        for row in range_to_change_font_color:
            for cell in row:
                cell.font = new_font



from datetime import datetime, timedelta, date
>>>>>>> origin/master

def formatting_red_IFRS4Q(sheet):
    workbook_path = r".\Input\Mapping_File Copy.xlsx"
    data_edge = pd.read_excel(workbook_path, sheet_name="Data_Edge")
    red_font_color = 'FFFF0000'

    # Pre-process the date column
    date_column = [cell.value for cell in sheet['A4:A24'] if cell.value and cell.value != '']
    datetime_index = pd.to_datetime(date_column, format="%m/%d/%Y", errors='coerce')
    formatted_dates = datetime_index.strftime('%Y-%m-%d').tolist()

    # Create a dictionary for faster lookup
    data_edge_dict = data_edge.set_index(['ISOCODES', 'Description']).to_dict('index')

    for row in sheet.iter_rows():
        for cell in row:
            if cell.value == user_inputs[1]:
                isocodes = sheet.cell(row=cell.row, column=cell.column + 8).value
                checks = sheet.cell(row=cell.row - 1, column=cell.column + 7).value

                match_data_edge = data_edge_dict.get((isocodes, checks))
                if match_data_edge:
                    prev_data_edge = pd.to_datetime(match_data_edge['Prev_Data_Edge'])
                    prev_data_edge_str = prev_data_edge.strftime('%m/%d/%Y')

                    row_matched_with_date = next((idx for idx, date in enumerate(date_column, start=4)
                                                  if date == prev_data_edge_str), None)

                    if row_matched_with_date:
                        font = Font(color=red_font_color, italic=True, name='Univers Next for HSBC Light')
                        for row in range(cell.row + 3, row_matched_with_date + 1):
                            for col in range(cell.column, cell.column + 6):
                                sheet.cell(row=row, column=col).font = font

    return sheet






def dashboard(request):
    folders = get_folders()
    selected_folder = request.GET.get("folder", None)
    selected_subfolder = request.GET.get("subfolder", None)
    subfolders = get_subfolders(selected_folder) if selected_folder else []

    context = {
        "folders": folders,
        "subfolders": subfolders,
        "selected_folder": selected_folder,
        "selected_subfolder": selected_subfolder,
    }

    return render(request, 'mi_templates/dashboard.html', context)

def mi_chart(request):
    selected_folder = request.GET.get("folder", None)
    selected_subfolder = request.GET.get("subfolder", None)

    if not (selected_folder and selected_subfolder):
        return redirect('dashboard')

    dataframes = read_excel_files(selected_folder, selected_subfolder)

    # Process dataframes and create lists
    lic_df = pd.concat([dataframes.get('lic_hbap_first_run', pd.DataFrame()),
                        dataframes.get('lic_hbap_last_run', pd.DataFrame())])

    context = {
        "Organisational_unit_level_1_list": lic_df["Organisational_unit_level_1"].unique().tolist(),
        "Organisational_unit_level_2_list": lic_df["Organisational_unit_level_2"].unique().tolist(),
        "Organisational_unit_level_3_list": lic_df["Organisational_unit_level_3"].unique().tolist(),
        "Country_of_Exposure_list": lic_df["Country_of_Exposure"].unique().tolist(),
        "Asset_class_list": lic_df["Asset_class"].unique().tolist(),
        "Product_Type_list": lic_df["Product_Type"].unique().tolist(),
        "Basel_Approach_list": lic_df["Basel_Approach"].unique().tolist(),
        "ST_scenario_combo": [f"{st} {scenario}" for st in lic_df["ST"].unique() for scenario in lic_df["scenario"].unique()],
    }

    return render(request, 'mi_templates/mi_chart.html', context)




from django.urls import path
from . import views

urlpatterns = [
    path('', views.dashboard, name='dashboard'),
    path('mi_chart/', views.mi_chart, name='mi_chart'),
]


document.getElementById('subfolder').addEventListener('change', function() {
    const folder = document.getElementById('folder').value;
    window.location.href = '/mi_chart/?folder=' + folder + '&subfolder=' + this.value;
});




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MI Tool Visualization</title>
</head>
<body>
    <div class="logo-container"></div>
    <h1>MI Tool Visualization</h1>
    <div class="dashboard-container">
        <div class="dropdown-container left">
            <select name="folder" id="folder">
                <option value="">Select Folder</option>
                {% for folder in folders %}
                    <option value="{{ folder }}" {% if folder == selected_folder %}selected{% endif %}>{{ folder }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="dropdown-container right">
            <select name="subfolder" id="subfolder">
                <option value="">Select Subfolder</option>
                {% for subfolder in subfolders %}
                    <option value="{{ subfolder }}" {% if subfolder == selected_subfolder %}selected{% endif %}>{{ subfolder }}</option>
                {% endfor %}
            </select>
        </div>
    </div>

    {% if selected_folder and selected_subfolder %}
        <h2>Selected Folder: {{ selected_folder }} / {{ selected_subfolder }}</h2>
    {% endif %}

    <script>
        document.getElementById('folder').addEventListener('change', function() {
            window.location.href = '?folder=' + this.value;
        });

        document.getElementById('subfolder').addEventListener('change', function() {
            const folder = document.getElementById('folder').value;
            window.location.href = '?folder=' + folder + '&subfolder=' + this.value;
        });
    </script>
</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MI Chart</title>
</head>
<body>
    <h1>MI Chart</h1>
    <div class="dropdowns-container">
        <div class="dropdowns-wrapper">
            <div class="dropdown-wrapper">
                <label for="Organisational_unit_level_1">Organisational Unit Level 1</label>
                <select class="multiselect" name="Organisational_unit_level_1" id="Organisational_unit_level_1" multiple>
                    {% for option in Organisational_unit_level_1_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="Organisational_unit_level_2">Organisational Unit Level 2</label>
                <select class="multiselect" name="Organisational_unit_level_2" id="Organisational_unit_level_2" multiple>
                    {% for option in Organisational_unit_level_2_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="Organisational_unit_level_3">Organisational Unit Level 3</label>
                <select class="multiselect" name="Organisational_unit_level_3" id="Organisational_unit_level_3" multiple>
                    {% for option in Organisational_unit_level_3_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="Country_of_Exposure">Country of Exposure</label>
                <select class="multiselect" name="Country_of_Exposure" id="Country_of_Exposure" multiple>
                    {% for option in Country_of_Exposure_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="Asset_class">Asset Class</label>
                <select class="multiselect" name="Asset_class" id="Asset_class" multiple>
                    {% for option in Asset_class_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="Product_Type">Product Type</label>
                <select class="multiselect" name="Product_Type" id="Product_Type" multiple>
                    {% for option in Product_Type_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="Basel_Approach">Basel Approach</label>
                <select class="multiselect" name="Basel_Approach" id="Basel_Approach" multiple>
                    {% for option in Basel_Approach_list %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="dropdown-wrapper">
                <label for="ST_scenario_combo">ST Scenario Combo</label>
                <select class="multiselect" name="ST_scenario_combo" id="ST_scenario_combo" multiple>
                    {% for option in ST_scenario_combo %}
                        <option value="{{ option }}">{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
    </div>

    <script>
        // You might want to add some JavaScript here to handle the multiselect functionality
    </script>
</body>
</html>



