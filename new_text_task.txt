import json
import requests
import pandas as pd
import socket
import sys

def is_domain_reachable(domain):
    try:
        ip_address = socket.gethostbyname(domain)
        return f"Domain is reachable. IP address: {ip_address}"
    except socket.gaierror as e:
        return f"Domain is not reachable. Error: {e}"

# API details
domain = 'api.focus-ecofuntus.com'
token_url = f'https://{domain}/v1/token-exchange'
token_headers = {
    'Authorization': 'jwt eyJhbGciOIHsfggywunnhjswkncbjjsjXVCJ9.aWQiOiIdhhjjjd1ZjUwYmYzYzkyY2VkZDAWNTF1YWVjYjgiLCJ1bWFpbCI6ImRlbW9AZGVtby5hbsjbiuhdinewuh ININddhjwplannheijfadjbbxhjac wiurhghjajkqlwiuurfbvhhxbnskskwZjNhOGQwMmZjNWR1YzVmMzRlMjJhYzY2NzU@YzAiLCJpYXQ1OjE1OTkxMjczNTZ9.jMqLXN3vB90wm01_oky_VFuUoyABziqZ9z-02MufKng'
}

print(f"Checking if domain is reachable...")
reachable_result = is_domain_reachable(domain)
print(reachable_result)

try:
    print(f"Attempting to connect to {token_url}...")
    token_response = requests.post(token_url, headers=token_headers, timeout=10)

    if token_response is None:
        print("The token request returned None. This might indicate a network error.")
    else:
        print(f"Token response status code: {token_response.status_code}")
        print(f"Token response headers: {token_response.headers}")
        print(f"Token response content: {token_response.content}")

        token_response.raise_for_status()
        access_token = token_response.json()['accesstoken']

        clients_url = f'https://{domain}/v1/clients/'
        clients_headers = {
            'Authorization': f'Bearer {access_token}'
        }

        print(f"Fetching client data from {clients_url}...")
        clients_response = requests.get(clients_url, headers=clients_headers, timeout=10)

        if clients_response is None:
            print("The clients request returned None. This might indicate a network error.")
        else:
            print(f"Clients response status code: {clients_response.status_code}")
            print(f"Clients response headers: {clients_response.headers}")
            print(f"Clients response content: {clients_response.content}")

            clients_response.raise_for_status()
            clients_data = clients_response.json()
            df = pd.DataFrame(clients_data)
            print(df)

except requests.exceptions.RequestException as e:
    print(f"Request error: {e}")
    if hasattr(e, 'response') and e.response is not None:
        print(f"Response status code: {e.response.status_code}")
        print(f"Response headers: {e.response.headers}")
        print(f"Response content: {e.response.content}")
    else:
        print("No response object available. This might indicate a network error or timeout.")
except json.JSONDecodeError as e:
    print(f"JSON decode error: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

print("\nAdditional diagnostics:")
print(f"Python version: {sys.version}")
print(f"Requests library version: {requests.__version__}")
print(f"Pandas version: {pd.__version__}")















import sqlite3
import pandas as pd

# Use raw string for file path to avoid escape character issues
sqlite_file = r'C:\Users\45363901\PycharmProjects\Imp\Python-Environment\db\Test_db.sqlite'

# Connect to the database
conn = sqlite3.connect(sqlite_file)
cursor = conn.cursor()

# Get all table names
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()

print("List of tables:")
for table in tables:
    print(table[0])

# Function to check if a column exists in a table
def column_exists(cursor, table_name, column_name):
    cursor.execute(f"PRAGMA table_info('{table_name}')")
    columns = [col[1] for col in cursor.fetchall()]
    return column_name in columns

# Search for 'Colaro' column in all tables
column_name = 'Colaro'
found_in_tables = []

for table in tables:
    table_name = table[0]
    if column_exists(cursor, table_name, column_name):
        found_in_tables.append(table_name)

if found_in_tables:
    print(f"\nThe column '{column_name}' was found in the following tables:")
    for table in found_in_tables:
        print(table)
else:
    print(f"\nThe column '{column_name}' was not found in any table.")

# Close the connection
conn.close()



python = "^3.9"
cycler = "^0.11.0"
et-xmlfile = "^1.1.0"
joblib = "^1.1.1"
kiwisolver = "^1.3.1"
lxml = "^4.9.2"
matplotlib = "^3.2.0"
numpy = "^1.19.5"
openpyxl = "^3.1.2"
pandas = "^1.1.5"
patsy = "^0.5.2"
Pillow = "^8.4.0"
pyparsing = "^3.0.7"
python-dateutil = "^2.8.2"
python-docx = "^0.8.11"
pytz = "2017.2"
scikit-learn = "^0.18.2"
scipy = "^1.5.4"
seaborn = "^0.11.2"
six = "^1.16.0"
statsmodels = "^0.12.2"
threadpoolctl = "^3.1.0"
xlrd = "^1.2.0"







import os
import pandas as pd
from bs4 import BeautifulSoup
import win32com.client as win32
import schedule
import time
from datetime import datetime

def process_html_files():
    folder_path = r"D:\IITJ_Drive"
    output_files = []
    mismatch_found = False

    for filename in os.listdir(folder_path):
        if filename.startswith('r_') and filename.endswith('.html'):
            file_path = os.path.join(folder_path, filename)

            with open(file_path, 'r') as file:
                soup = BeautifulSoup(file, 'html.parser')
                table = soup.find('table')
                df = pd.read_html(str(table))[0]

            df['Mismatch'] = df['smd'] != df['Prod']

            if df['Mismatch'].any():
                mismatch_found = True

            styled_df = df.style.apply(lambda x: ['background-color: yellow' if v else '' for v in x['Mismatch']], axis=1)
            output_file = os.path.join(folder_path, f"processed_{filename}")
            styled_df.to_html(output_file)
            output_files.append(output_file)

    create_draft_email(output_files, mismatch_found)

def create_draft_email(attachments, mismatch_found):
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)

    if mismatch_found:
        mail.To = "rampunit.kumar@hsbc.com"
        mail.Subject = "Mismatch Found in HTML Tables"
        mail.Body = "Please find attached the processed HTML files with highlighted mismatches."
    else:
        mail.To = "rashmi.moghanty@hsbc.com"
        mail.Subject = "Daily HTML Table Comparison Report"
        mail.Body = "Please find attached the processed HTML files. No mismatches were found."

    for attachment in attachments:
        mail.Attachments.Add(attachment)

    mail.Save()

def run_daily_task():
    process_html_files()

schedule.every().day.at("11:00").do(run_daily_task)

while True:
    schedule.run_pending()
    time.sleep(60)






# Create a new Poetry project
poetry new python39_project
cd python39_project

# Set Python version to 3.9
poetry env use python3.9

# Add dependencies
poetry add cycler@^0.11.0 \
    et-xmlfile@^1.1.0 \
    joblib@^1.1.1 \
    kiwisolver@^1.3.1 \
    lxml@^4.9.2 \
    matplotlib@^3.2.0 \
    numpy@^1.19.5 \
    openpyxl@^3.1.2 \
    pandas@^1.1.5 \
    patsy@^0.5.2 \
    Pillow@^8.4.0 \
    pyparsing@^3.0.7 \
    python-dateutil@^2.8.2 \
    python-docx@^0.8.11 \
    pytz@2017.2 \
    scikit-learn@^0.18.2 \
    scipy@^1.5.4 \
    seaborn@^0.11.2 \
    six@^1.16.0 \
    statsmodels@^0.12.2 \
    xlrd@^1.2.0 \
    threadpoolctl@^3.1.0

# Activate the virtual environment
poetry shell