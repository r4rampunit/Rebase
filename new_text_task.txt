from django.shortcuts import render
import pandas as pd
import random

def create_sample_dataframe():
    # Create a sample dataframe with random data
    data = {
        'KT_Scenario': random.choices(['Scenario1', 'Scenario2', 'Scenario3', 'Scenario4', 'Scenario5'], k=1000),
        'Organisational_unit_level_1': random.choices(['Unit1', 'Unit2', 'Unit3', 'Unit4', 'Unit5'], k=1000),
        'Organisational_unit_level_2': random.choices(['SubUnit1', 'SubUnit2', 'SubUnit3', 'SubUnit4', 'SubUnit5'], k=1000),
        'Organisational_unit_level_3': random.choices(['MicroUnit1', 'MicroUnit2', 'MicroUnit3', 'MicroUnit4', 'MicroUnit5'], k=1000),
        'Country_of_exposure': random.choices(['USA', 'UK', 'Germany', 'France', 'Japan', 'China', 'India', 'Brazil'], k=1000),
        'Asset_class': random.choices(['Equity', 'Fixed Income', 'Real Estate', 'Commodities', 'Cash'], k=1000),
        'ProductType': random.choices(['Stocks', 'Bonds', 'Mutual Funds', 'ETFs', 'Options', 'Futures'], k=1000),
        'Basel_approach': random.choices(['Standardized', 'IRB', 'Advanced IRB'], k=1000),
        'ST_Scenario': random.choices(['Baseline', 'Adverse', 'Severely Adverse'], k=1000),
        'Value': [random.uniform(1000, 10000) for _ in range(1000)]
    }
    return pd.DataFrame(data)

def chart_view(request):
    df = create_sample_dataframe()

    # Get unique values for each dropdown
    dropdowns = {
        'KT_Scenario': df['KT_Scenario'].unique().tolist(),
        'Organisational_unit_level_1': df['Organisational_unit_level_1'].unique().tolist(),
        'Organisational_unit_level_2': df['Organisational_unit_level_2'].unique().tolist(),
        'Organisational_unit_level_3': df['Organisational_unit_level_3'].unique().tolist(),
        'Country_of_exposure': df['Country_of_exposure'].unique().tolist(),
        'Asset_class': df['Asset_class'].unique().tolist(),
        'ProductType': df['ProductType'].unique().tolist(),
        'Basel_approach': df['Basel_approach'].unique().tolist(),
        'ST_Scenario': df['ST_Scenario'].unique().tolist(),
    }

    # Get selected values from request
    selected = {key: request.GET.getlist(key) for key in dropdowns.keys()}

    # Filter the dataframe based on selections
    for key, values in selected.items():
        if values:
            df = df[df[key].isin(values)]

    # Convert filtered dataframe to list of dicts for template
    filtered_data = df.to_dict('records')

    context = {
        'dropdowns': dropdowns,
        'selected': selected,
        'filtered_data': filtered_data,
    }

    return render(request, 'chart.html', context)






{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart View</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css">
    <style>
        .dropdown-wrapper {
            display: flex;
            overflow-x: auto;
            padding: 10px 0;
        }
        .dropdown-container {
            margin-right: 20px;
            min-width: 200px;
        }
        .dropdown-container select {
            width: 100%;
        }
        .select2-container--default .select2-results__option {
            display: inline-block;
            width: 50%;
        }
    </style>
</head>
<body>
    <form method="get" action="{% url 'chart_view' %}">
        <div class="dropdown-wrapper">
            {% for key, options in dropdowns.items %}
            <div class="dropdown-container">
                <label for="{{ key }}">{{ key }}:</label>
                <select name="{{ key }}" id="{{ key }}" multiple="multiple">
                    {% for option in options %}
                    <option value="{{ option }}" {% if option in selected|get_item:key %}selected{% endif %}>{{ option }}</option>
                    {% endfor %}
                </select>
            </div>
            {% endfor %}
        </div>
        <button type="submit">Apply Filters</button>
    </form>

    <h2>Filtered Data:</h2>
    <table border="1">
        <thead>
            <tr>
                {% for key in dropdowns.keys %}
                <th>{{ key }}</th>
                {% endfor %}
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            {% for row in filtered_data %}
            <tr>
                {% for key in dropdowns.keys %}
                <td>{{ row|get_item:key }}</td>
                {% endfor %}
                <td>{{ row.Value|floatformat:2 }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        $(document).ready(function() {
            $('select').select2({
                width: '100%',
                closeOnSelect: false,
            });
        });
    </script>
</body>
</html>







from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)