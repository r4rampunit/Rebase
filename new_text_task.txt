from django.http import JsonResponse
from django.shortcuts import render

def mi_chart(request):
    folders = get_folders()
    selected_folder = request.GET.get("folder", None)
    selected_subfolder = request.GET.get("subfolder", None)
    subfolders = get_subfolders(selected_folder) if selected_folder else []

    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        selected_items = request.GET.get('selectedItems', {})
        # Print the selected items for testing purposes
        print(selected_items)
        return JsonResponse({'status': 'success', 'selectedItems': selected_items})

    if selected_folder and selected_subfolder:
        dataframes = read_excel_files(selected_folder, selected_subfolder)
    else:
        dataframes = []

    context = {
        'folders': folders,
        'subfolders': subfolders,
        'dataframes': dataframes,
    }

    return render(request, 'mi_templates/mi_chart.html', context)







function updateSelectedItems() {
  var allSelected = true;
  var selectedItems = {};

  $('.multiselect').each(function() {
    var dropdownName = $(this).attr('name');
    var selected = $(this).select2('data');
    if (selected.length == 0) {
      allSelected = false;
    }
    selectedItems[dropdownName] = selected.map(item => item.text);
  });

  if (allSelected) {
    var html = '<h3>Selected Items:</h3>';
    for (var dropdown in selectedItems) {
      html += '<p><strong>' + dropdown + ':</strong> ' + selectedItems[dropdown].join(', ') + '</p>';
    }
    $('#selectedItems').html(html).show();

    // Send selected items to the server via AJAX
    $.ajax({
      url: window.location.href,
      method: 'POST',
      data: {
        selectedItems: JSON.stringify(selectedItems),
        csrfmiddlewaretoken: getCookie('csrftoken')  // Add this line
      },
      success: function(response) {
        console.log('Selected items sent to server successfully.');
        // Update the table with the new data
        $('#tableContainer').html(response);
      },
      error: function(xhr, status, error) {
        console.error('Error sending selected items to server:', error);
      }
    });
  } else {
    $('#selectedItems').hide();
  }
}


function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== '') {
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === (name + '=')) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}




from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def mi_chart(request):
    if request.method == 'POST':
        selected_items = json.loads(request.POST.get('selectedItems', '{}'))

        # Process the selected items
        # For example, you can filter your data based on the selections

        # Generate the new table HTML
        table_html = generate_table_html(selected_items)  # You need to implement this function

        return HttpResponse(table_html)
    else:
        # Your existing code for GET requests
        ...






<body>
  <img src="/static/img/HSBC_hex.png" alt="Logo" class="logo">
  <center>
    <h1>Multiple Multiselect Dropdowns</h1>
    <hr/>
    <div class="dropdowns-container">
      <div class="dropdowns-wrapper">
        <div class="dropdown-wrapper">
          <select class="multiselect" name="trees" multiple>
            <option value="Oak">Oak</option>
            <option value="Pine">Pine</option>
            <option value="Maple">Maple</option>
            <option value="Birch">Birch</option>
            <option value="Elm">Elm</option>
          </select>
        </div>
        <div class="dropdown-wrapper">
          <select class="multiselect" name="animals" multiple>
            <option value="Lion">Lion</option>
            <option value="Elephant">Elephant</option>
            <option value="Giraffe">Giraffe</option>
            <option value="Tiger">Tiger</option>
            <option value="Bear">Bear</option>
          </select>
        </div>
        <div class="dropdown-wrapper">
          <select class="multiselect" name="flowers" multiple>
            <option value="Rose">Rose</option>
            <option value="Tulip">Tulip</option>
            <option value="Daisy">Daisy</option>
            <option value="Sunflower">Sunflower</option>
            <option value="Lily">Lily</option>
          </select>
        </div>
        <div class="dropdown-wrapper">
          <select class="multiselect" name="rivers" multiple>
            <option value="Amazon">Amazon</option>
            <option value="Nile">Nile</option>
            <option value="Yangtze">Yangtze</option>
            <option value="Mississippi">Mississippi</option>
            <option value="Danube">Danube</option>
          </select>
        </div>
        <div class="dropdown-wrapper">
          <select class="multiselect" name="countries" multiple>
            <option value="USA">USA</option>
            <option value="China">China</option>
            <option value="India">India</option>
            <option value="Brazil">Brazil</option>
            <option value="Russia">Russia</option>
          </select>
        </div>
      </div>
    </div>
    <div id="tableContainer"></div>
    {% csrf_token %}
  </center>
</body>




$(document).ready(function() {
  $(".multiselect").select2({
    placeholder: 'Select one or more options',
    closeOnSelect: false,
    allowClear: true,
    tags: true
  });

  function updateSelectedItems() {
    var selectedItems = {};
    $('.multiselect').each(function() {
      var dropdownName = $(this).attr('name');
      var selected = $(this).select2('data');
      selectedItems[dropdownName] = selected.map(item => item.text);
    });

    // Send selected items to the server via AJAX
    $.ajax({
      url: '/mi_chart/',  // Update this URL to match your Django URL configuration
      method: 'POST',
      data: {
        selectedItems: JSON.stringify(selectedItems),
        csrfmiddlewaretoken: getCookie('csrftoken')
      },
      success: function(response) {
        $('#tableContainer').html(response);
      },
      error: function(xhr, status, error) {
        console.error('Error sending selected items to server:', error);
      }
    });
  }

  $('.multiselect').on('change', updateSelectedItems);

  // Initial call to populate the table
  updateSelectedItems();
});

function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== '') {
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === (name + '=')) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}




from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def mi_chart(request):
    if request.method == 'POST':
        selected_items = json.loads(request.POST.get('selectedItems', '{}'))

        # Generate the table HTML
        html = "<table border='1'>"
        html += "<tr><th>Category</th><th>Selected Items</th></tr>"

        for category, items in selected_items.items():
            html += f"<tr><td>{category.capitalize()}</td><td>{', '.join(items)}</td></tr>"

        html += "</table>"

        return HttpResponse(html)
    else:
        return HttpResponse("This view only accepts POST requests.")





















from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def mi_chart(request):
    if request.method == 'POST':
        selected_items = json.loads(request.POST.get('selectedItems', '{}'))

        # Generate the table HTML
        html = generate_table_html(selected_items)

        return HttpResponse(html)
    else:
        # For GET requests, render the initial page with an empty table
        initial_data = {
            'trees': [],
            'animals': [],
            'flowers': [],
            'rivers': [],
            'countries': []
        }
        initial_table = generate_table_html(initial_data)
        context = {
            'initial_table': initial_table
        }
        return render(request, 'your_template_name.html', context)

def generate_table_html(selected_items):
    html = "<table border='1'>"
    html += "<tr><th>Category</th><th>Selected Items</th></tr>"

    for category, items in selected_items.items():
        html += f"<tr><td>{category.capitalize()}</td><td>{', '.join(items)}</td></tr>"

    html += "</table>"
    return html
















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiple Multiselect Dropdowns</title>
    <!-- Include necessary CSS and JS files here -->
</head>
<body>
    <img src="/static/img/HSBC_hex.png" alt="Logo" class="logo">
    <center>
        <h1>Multiple Multiselect Dropdowns</h1>
        <hr/>
        <div class="dropdowns-container">
            <div class="dropdowns-wrapper">
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="trees" multiple>
                        <option value="Oak">Oak</option>
                        <option value="Pine">Pine</option>
                        <option value="Maple">Maple</option>
                        <option value="Birch">Birch</option>
                        <option value="Elm">Elm</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="animals" multiple>
                        <option value="Lion">Lion</option>
                        <option value="Elephant">Elephant</option>
                        <option value="Giraffe">Giraffe</option>
                        <option value="Tiger">Tiger</option>
                        <option value="Bear">Bear</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="flowers" multiple>
                        <option value="Rose">Rose</option>
                        <option value="Tulip">Tulip</option>
                        <option value="Daisy">Daisy</option>
                        <option value="Sunflower">Sunflower</option>
                        <option value="Lily">Lily</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="rivers" multiple>
                        <option value="Amazon">Amazon</option>
                        <option value="Nile">Nile</option>
                        <option value="Yangtze">Yangtze</option>
                        <option value="Mississippi">Mississippi</option>
                        <option value="Danube">Danube</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="countries" multiple>
                        <option value="USA">USA</option>
                        <option value="China">China</option>
                        <option value="India">India</option>
                        <option value="Brazil">Brazil</option>
                        <option value="Russia">Russia</option>
                    </select>
                </div>
            </div>
        </div>
        <div id="tableContainer">
            {{ initial_table|safe }}
        </div>
        {% csrf_token %}
    </center>
    <!-- Include your JavaScript code here -->
</body>
</html>





















import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
import json

# Create the DataFrame
data = {
    'trees': ['Oak', 'Pine', 'Maple', 'Birch', 'Elm', 'Redwood', 'Cedar', 'Spruce', 'Fir', 'Willow'],
    'animals': ['Lion', 'Elephant', 'Giraffe', 'Tiger', 'Bear', 'Wolf', 'Deer', 'Fox', 'Leopard', 'Rhino'],
    'flowers': ['Rose', 'Tulip', 'Daisy', 'Sunflower', 'Lily', 'Orchid', 'Carnation', 'Daffodil', 'Iris', 'Peony'],
    'rivers': ['Amazon', 'Nile', 'Yangtze', 'Mississippi', 'Danube', 'Congo', 'Mekong', 'Rhine', 'Volga', 'Thames'],
    'countries': ['USA', 'China', 'India', 'Brazil', 'Russia', 'Japan', 'Germany', 'UK', 'France', 'Canada']
}

df = pd.DataFrame(data)

@csrf_exempt
def mi_chart(request):
    if request.method == 'POST':
        selected_items = json.loads(request.POST.get('selectedItems', '{}'))

        # Filter the DataFrame
        filtered_df = df.copy()
        for category, items in selected_items.items():
            if items:
                filtered_df = filtered_df[filtered_df[category].isin(items)]

        # Generate the table HTML
        table_html = filtered_df.to_html(classes='table table-striped')

        # Generate plots
        plots_html = generate_plots(filtered_df)

        response_html = f"{table_html}<br>{plots_html}"
        return HttpResponse(response_html)
    else:
        # For GET requests, render the initial page with the full DataFrame
        initial_table = df.to_html(classes='table table-striped')
        initial_plots = generate_plots(df)
        context = {
            'initial_table': initial_table,
            'initial_plots': initial_plots,
            'categories': list(df.columns)
        }
        return render(request, 'your_template_name.html', context)

def generate_plots(df):
    plots_html = ""

    # Plot 1: Bar chart of counts for each category
    plt.figure(figsize=(10, 6))
    df.count().plot(kind='bar')
    plt.title('Count of Items in Each Category')
    plt.ylabel('Count')
    plots_html += get_plot_html()

    # Plot 2: Pie chart of the first category
    plt.figure(figsize=(8, 8))
    df[df.columns[0]].value_counts().plot(kind='pie', autopct='%1.1f%%')
    plt.title(f'Distribution of {df.columns[0]}')
    plots_html += get_plot_html()

    return plots_html

def get_plot_html():
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_png = buffer.getvalue()
    buffer.close()
    graphic = base64.b64encode(image_png)
    graphic = graphic.decode('utf-8')
    return f'<img src="data:image/png;base64,{graphic}"/>'





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiple Multiselect Dropdowns</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <style>
        .dropdown-wrapper { margin-bottom: 10px; }
    </style>
</head>
<body>
    <img src="/static/img/HSBC_hex.png" alt="Logo" class="logo">
    <center>
        <h1>Multiple Multiselect Dropdowns</h1>
        <hr/>
        <div class="dropdowns-container">
            <div class="dropdowns-wrapper">
                {% for category in categories %}
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="{{ category }}" multiple>
                        {% for option in df[category] %}
                        <option value="{{ option }}">{{ option }}</option>
                        {% endfor %}
                    </select>
                </div>
                {% endfor %}
            </div>
        </div>
        <div id="tableContainer">
            {{ initial_table|safe }}
        </div>
        <div id="plotsContainer">
            {{ initial_plots|safe }}
        </div>
        {% csrf_token %}
    </center>
    <script>
        $(document).ready(function() {
            $(".multiselect").select2({
                placeholder: 'Select one or more options',
                closeOnSelect: false,
                allowClear: true,
                tags: true
            });

            function updateSelectedItems() {
                var selectedItems = {};
                $('.multiselect').each(function() {
                    var dropdownName = $(this).attr('name');
                    var selected = $(this).select2('data');
                    selectedItems[dropdownName] = selected.map(item => item.text);
                });

                $.ajax({
                    url: '/mi_chart/',  // Update this URL to match your Django URL configuration
                    method: 'POST',
                    data: {
                        selectedItems: JSON.stringify(selectedItems),
                        csrfmiddlewaretoken: $('input[name=csrfmiddlewaretoken]').val()
                    },
                    success: function(response) {
                        $('#tableContainer').html($(response).filter('#tableContainer').html());
                        $('#plotsContainer').html($(response).filter('#plotsContainer').html());
                    },
                    error: function(xhr, status, error) {
                        console.error('Error sending selected items to server:', error);
                    }
                });
            }

            $('.multiselect').on('change', updateSelectedItems);
        });
    </script>
</body>
</html>
























import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
import json

# Create the DataFrame with hard-coded options
data = {
    'trees': ['Oak', 'Pine', 'Maple', 'Birch', 'Elm'],
    'animals': ['Lion', 'Elephant', 'Giraffe', 'Tiger', 'Bear'],
    'flowers': ['Rose', 'Tulip', 'Daisy', 'Sunflower', 'Lily'],
    'rivers': ['Amazon', 'Nile', 'Yangtze', 'Mississippi', 'Danube'],
    'countries': ['USA', 'China', 'India', 'Brazil', 'Russia']
}

df = pd.DataFrame(data)

@csrf_exempt
def mi_chart(request):
    if request.method == 'POST':
        selected_items = json.loads(request.POST.get('selectedItems', '{}'))

        # Filter the DataFrame
        filtered_df = df.copy()
        for category, items in selected_items.items():
            if items:
                filtered_df = filtered_df[filtered_df[category].isin(items)]

        # Generate the table HTML
        table_html = filtered_df.to_html(classes='table table-striped')

        # Generate plots
        plots_html = generate_plots(filtered_df)

        response_html = f"<div id='tableContainer'>{table_html}</div><div id='plotsContainer'>{plots_html}</div>"
        return HttpResponse(response_html)
    else:
        # For GET requests, render the initial page with the full DataFrame
        initial_table = df.to_html(classes='table table-striped')
        initial_plots = generate_plots(df)
        context = {
            'initial_table': initial_table,
            'initial_plots': initial_plots
        }
        return render(request, 'your_template_name.html', context)

def generate_plots(df):
    plots_html = ""

    # Plot 1: Bar chart of counts for each category
    plt.figure(figsize=(10, 6))
    df.count().plot(kind='bar')
    plt.title('Count of Items in Each Category')
    plt.ylabel('Count')
    plots_html += get_plot_html()

    # Plot 2: Pie chart of the first category
    plt.figure(figsize=(8, 8))
    df[df.columns[0]].value_counts().plot(kind='pie', autopct='%1.1f%%')
    plt.title(f'Distribution of {df.columns[0]}')
    plots_html += get_plot_html()

    return plots_html

def get_plot_html():
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_png = buffer.getvalue()
    buffer.close()
    graphic = base64.b64encode(image_png)
    graphic = graphic.decode('utf-8')
    return f'<img src="data:image/png;base64,{graphic}"/>'









<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiple Multiselect Dropdowns</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <style>
        .dropdown-wrapper { margin-bottom: 10px; }
    </style>
</head>
<body>
    <img src="/static/img/HSBC_hex.png" alt="Logo" class="logo">
    <center>
        <h1>Multiple Multiselect Dropdowns</h1>
        <hr/>
        <div class="dropdowns-container">
            <div class="dropdowns-wrapper">
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="trees" multiple>
                        <option value="Oak">Oak</option>
                        <option value="Pine">Pine</option>
                        <option value="Maple">Maple</option>
                        <option value="Birch">Birch</option>
                        <option value="Elm">Elm</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="animals" multiple>
                        <option value="Lion">Lion</option>
                        <option value="Elephant">Elephant</option>
                        <option value="Giraffe">Giraffe</option>
                        <option value="Tiger">Tiger</option>
                        <option value="Bear">Bear</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="flowers" multiple>
                        <option value="Rose">Rose</option>
                        <option value="Tulip">Tulip</option>
                        <option value="Daisy">Daisy</option>
                        <option value="Sunflower">Sunflower</option>
                        <option value="Lily">Lily</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="rivers" multiple>
                        <option value="Amazon">Amazon</option>
                        <option value="Nile">Nile</option>
                        <option value="Yangtze">Yangtze</option>
                        <option value="Mississippi">Mississippi</option>
                        <option value="Danube">Danube</option>
                    </select>
                </div>
                <div class="dropdown-wrapper">
                    <select class="multiselect" name="countries" multiple>
                        <option value="USA">USA</option>
                        <option value="China">China</option>
                        <option value="India">India</option>
                        <option value="Brazil">Brazil</option>
                        <option value="Russia">Russia</option>
                    </select>
                </div>
            </div>
        </div>
        <div id="tableContainer">
            {{ initial_table|safe }}
        </div>
        <div id="plotsContainer">
            {{ initial_plots|safe }}
        </div>
        {% csrf_token %}
    </center>
    <script>
        $(document).ready(function() {
            $(".multiselect").select2({
                placeholder: 'Select one or more options',
                closeOnSelect: false,
                allowClear: true
            });

            function updateSelectedItems() {
                var selectedItems = {};
                $('.multiselect').each(function() {
                    var dropdownName = $(this).attr('name');
                    var selected = $(this).select2('data');
                    selectedItems[dropdownName] = selected.map(item => item.text);
                });

                $.ajax({
                    url: '/mi_chart/',  // Update this URL to match your Django URL configuration
                    method: 'POST',
                    data: {
                        selectedItems: JSON.stringify(selectedItems),
                        csrfmiddlewaretoken: $('input[name=csrfmiddlewaretoken]').val()
                    },
                    success: function(response) {
                        $('#tableContainer').html($(response).filter('#tableContainer').html());
                        $('#plotsContainer').html($(response).filter('#plotsContainer').html());
                    },
                    error: function(xhr, status, error) {
                        console.error('Error sending selected items to server:', error);
                    }
                });
            }

            $('.multiselect').on('change', updateSelectedItems);
        });
    </script>
</body>
</html>




















@csrf_exempt
def mi_chart(request):
    response_html = ""  # Initialize response_html at the beginning

    if request.method == 'POST':
        selected_items = json.loads(request.POST.get('selectedItems', '{}'))
        print(selected_items)
        list_of_selected = []
        for category, items in selected_items.items():
            if items:
                print(category)
                list_of_selected.append(items)

        # Assign selected items to variables
        Organisational_unit_level_1_selected = list_of_selected[0]
        Organisational_unit_level_2_selected = list_of_selected[1]
        Organisational_unit_level_3_selected = list_of_selected[2]
        Country_of_Exposure_selected = list_of_selected[3]
        Asset_class_selected = list_of_selected[4]
        Product_Type_selected = list_of_selected[5]
        Basel_Approach_selected = list_of_selected[6]
        ST_scenario_selected = list_of_selected[7]

    folders = get_folders()
    selected_folder = request.GET.get("folder", None)
    selected_subfolder = request.GET.get("subfolder", None)
    subfolders = get_subfolders(selected_folder) if selected_folder else []

    if selected_folder and selected_subfolder:
        folder_path = os.path.join(FOLDER_PATH, selected_folder, selected_subfolder)
        excel_files = [f for f in os.listdir(folder_path) if f.endswith(".xlsx")]

        # Process excel files and perform data operations here
        # ...

        # Create and populate table_df
        table_df = pd.DataFrame()  # Initialize table_df

        # Populate table_df
        # ...

        table_html = table_df.to_html(classes='table table-striped table-bordered', index=False)
        response_html = f"<div id='tableContainer'>{table_html}</div>"

    if response_html:
        return HttpResponse(response_html)
    else:
        context1 = {
            'folders': folders,
            'subfolders': subfolders,
            'selected_folder': selected_folder,
            'selected_subfolder': selected_subfolder,
            'Organisational_unit_level_1_list': Organisational_unit_level_1_list,
            'Organisational_unit_level_2_list': Organisational_unit_level_2_list,
            'Organisational_unit_level_3_list': Organisational_unit_level_3_list,
            'Country_of_Exposure_list': Country_of_Exposure_list,
            'Asset_class_list': Asset_class_list,
            'Product_Type_list': Product_Type_list,
            'Basel_Approach_list': Basel_Approach_list,
            'ST_scenario_combo': ST_scenario_combo
        }
        return render(request, 'mi_templates/mi_chart.html', context1)