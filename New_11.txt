# FILE: Utils/data_import_helpers.py
import polars as pl
from pathlib import Path
from typing import Dict, Any, Optional

class DataImportHelper:
    def __init__(self, input_dir: str = "Input"):
        self.input_dir = Path(input_dir)
    
    def import_excel(self, filename: str, sheet_name: Optional[str] = None) -> pl.DataFrame:
        file_path = self.input_dir / filename
        return pl.read_excel(file_path, sheet_name=sheet_name)
    
    def export_csv(self, data: pl.DataFrame, filename: str, output_dir: str = "Output") -> None:
        output_path = Path(output_dir) / filename
        output_path.parent.mkdir(parents=True, exist_ok=True)
        data.write_csv(output_path)
    
    def export_excel(self, data: pl.DataFrame, filename: str, sheet_name: str = "Sheet1", output_dir: str = "Output") -> None:
        output_path = Path(output_dir) / filename
        output_path.parent.mkdir(parents=True, exist_ok=True)
        data.write_excel(output_path, worksheet=sheet_name)

# FILE: Utils/glm_model_architecture.py
import polars as pl
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from typing import List, Dict, Optional, Tuple, Any
from abc import ABC, abstractmethod
import pandas as pd

class BaseGLMModel(ABC):
    def __init__(self, fit_intercept: bool = False):
        self.model = LinearRegression(fit_intercept=fit_intercept)
        self.encoder = OneHotEncoder(drop='first', sparse_output=False)
        self.is_fitted = False
        self.feature_columns = None
        self.target_column = None
        self.categorical_columns = []
    
    @abstractmethod
    def prepare_features(self, data: pl.DataFrame) -> np.ndarray:
        pass
    
    @abstractmethod
    def prepare_target(self, data: pl.DataFrame) -> np.ndarray:
        pass
    
    def fit(self, train_data: pl.DataFrame) -> 'BaseGLMModel':
        X = self.prepare_features(train_data)
        y = self.prepare_target(train_data)
        self.model.fit(X, y)
        self.is_fitted = True
        return self
    
    def predict(self, data: pl.DataFrame) -> np.ndarray:
        if not self.is_fitted:
            raise ValueError("Model must be fitted before prediction")
        X = self.prepare_features(data)
        return self.model.predict(X)
    
    def score_data(self, data: pl.DataFrame, prediction_col: str = "prediction") -> pl.DataFrame:
        predictions = self.predict(data)
        return data.with_columns(pl.Series(predictions).alias(prediction_col))

class HPIGLMModel(BaseGLMModel):
    def __init__(self, target_col: str, categorical_cols: List[str], continuous_cols: List[str]):
        super().__init__(fit_intercept=False)
        self.target_col = target_col
        self.categorical_cols = categorical_cols
        self.continuous_cols = continuous_cols
        self.fitted_categories = {}
    
    def prepare_features(self, data: pl.DataFrame) -> np.ndarray:
        features = []
        
        for cat_col in self.categorical_cols:
            if not self.is_fitted:
                unique_vals = data[cat_col].unique().to_list()
                self.fitted_categories[cat_col] = unique_vals
            
            cat_data = data.select(cat_col).to_pandas()
            encoded = pd.get_dummies(cat_data, drop_first=True, dtype=float)
            features.append(encoded.values)
        
        for cont_col in self.continuous_cols:
            cont_data = data.select(cont_col).to_numpy().reshape(-1, 1)
            features.append(cont_data)
        
        if features:
            return np.hstack(features)
        else:
            return np.array([]).reshape(len(data), 0)
    
    def prepare_target(self, data: pl.DataFrame) -> np.ndarray:
        return data.select(self.target_col).to_numpy().ravel()

# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/__init__.py
from ._constants import Constants
from ._parameters import Params
from ._dataclasses import CLV4Combined, NationalHPI, StateMetroMap, MoodysMapping
from ._schemas import *

__all__ = ["Constants", "Params", "CLV4Combined", "NationalHPI", "StateMetroMap", "MoodysMapping"]

# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_constants.py
from datetime import date

class Constants:
    LAST_HISTORY_DATE = date(2025, 3, 31)
    REGRESSION_START_DATE = date(2000, 3, 31)
    REGRESSION_END_DATE = date(2023, 6, 30)
    FORECAST_START_DATE = date(2025, 6, 30)
    
    QUARTER_MAPPING = {
        ('01', '02', '03'): 'Q1',
        ('04', '05', '06'): 'Q2',
        ('07', '08', '09'): 'Q3',
        ('10', '11', '12'): 'Q4'
    }

# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_parameters.py
from dataclasses import dataclass
from typing import List, Optional
from datetime import date

@dataclass
class Params:
    scenarios: List[str]
    regions: List[str]
    input_dir: str
    output_dir: str
    last_history_date: date
    regression_start_date: date
    regression_end_date: date
    forecast_start_date: date

# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_dataclasses.py
from dataclasses import dataclass
from typing import Optional
from datetime import date
import polars as pl

@dataclass
class CLV4Combined:
    code: str
    name: str
    date: date
    home_price_index: float
    hpi_sa: Optional[float] = None
    yoy_corelogicv4: Optional[float] = None
    dlog_corelogicv4: Optional[float] = None

@dataclass
class NationalHPI:
    date: date
    corelogic_v4: float

@dataclass
class StateMetroMap:
    cbsa_code: str
    cbsa_name: str
    st: str

@dataclass
class MoodysMapping:
    geography: str
    fip: str
    geocode: Optional[str] = None

# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_schemas.py
import polars as pl

CLV4_COMBINED_SCHEMA = {
    "Code": pl.Utf8,
    "Name": pl.Utf8,
    "date": pl.Date,
    "Home_Price_Index": pl.Float64,
    "HPI_SA": pl.Float64,
    "YOY_CoreLogicV4": pl.Float64,
    "DLOG_CoreLogicV4": pl.Float64,
}

NATIONAL_HPI_SCHEMA = {
    "date": pl.Date,
    "CORELOGIC_V4": pl.Float64,
}

STATE_METRO_MAP_SCHEMA = {
    "CBSA_Code": pl.Utf8,
    "CBSA_Name": pl.Utf8,
    "ST": pl.Utf8,
}

MOODYS_MAPPING_SCHEMA = {
    "Geography": pl.Utf8,
    "FIP": pl.Utf8,
    "Geocode": pl.Utf8,
}

# FILE: src/gemini_scenario_models/hpi_projection_us/__init__.py
from .model import GLMModelScenarioProjection

__all__ = ["GLMModelScenarioProjection"]

# FILE: src/gemini_scenario_models/hpi_projection_us/data_preparation.py
import polars as pl
from datetime import datetime, date
from typing import Tuple
from dependencies import Constants, Params

class DataPreparation:
    def __init__(self, params: Params):
        self.params = params
    
    def run_data_prep(
        self,
        clv4_state_extract: pl.DataFrame,
        clv4_msa_extract: pl.DataFrame,
        moodys_mapping: pl.DataFrame
    ) -> Tuple[pl.DataFrame, pl.DataFrame, pl.DataFrame]:
        state_data = self._prepare_state_data(clv4_state_extract, moodys_mapping)
        metro_data = self._prepare_metro_data(clv4_msa_extract, moodys_mapping)
        combined_data = self._combine_data(state_data, metro_data)
        return state_data, metro_data, combined_data
    
    def _prepare_state_data(self, clv4_state_extract: pl.DataFrame, moodys_mapping: pl.DataFrame) -> pl.DataFrame:
        # Handle case sensitivity in column names
        state_cols = clv4_state_extract.columns
        state_name_col = next((col for col in state_cols if col.upper() == 'STATE_NAME'), 'State_Name')
        year_col = next((col for col in state_cols if col.upper() == 'YEAR'), 'Year')
        month_col = next((col for col in state_cols if col.upper() == 'MONTH'), 'Month')
        hpi_col = next((col for col in state_cols if col.upper() == 'HOME_PRICE_INDEX'), 'Home_Price_Index')
        
        mapping_cols = moodys_mapping.columns
        geography_col = next((col for col in mapping_cols if col.upper() == 'GEOGRAPHY'), 'Geography')
        fip_col = next((col for col in mapping_cols if col.upper() == 'FIP'), 'FIP')
        
        state_with_fip = clv4_state_extract.join(
            moodys_mapping.select([
                pl.col(geography_col).str.to_uppercase().alias("state_name_upper"),
                pl.col(fip_col).alias("State_Code")
            ]),
            left_on=pl.col(state_name_col).str.to_uppercase(),
            right_on="state_name_upper",
            how="left"
        )
        
        state_with_yyyymm = state_with_fip.with_columns([
            pl.when(pl.col(month_col) < 10)
            .then(pl.col(year_col).cast(pl.Utf8) + "0" + pl.col(month_col).cast(pl.Utf8))
            .otherwise(pl.col(year_col).cast(pl.Utf8) + pl.col(month_col).cast(pl.Utf8))
            .alias("YYYYMM")
        ])
        
        filtered_data = state_with_yyyymm.filter(pl.col("YYYYMM").cast(pl.Int32) <= 202503)
        
        return filtered_data
    
    def _prepare_metro_data(self, clv4_msa_extract: pl.DataFrame, moodys_mapping: pl.DataFrame) -> pl.DataFrame:
        # Handle case sensitivity in column names
        metro_cols = clv4_msa_extract.columns
        cbsa_name_col = next((col for col in metro_cols if col.upper() == 'CBSA_NAME'), 'CBSA_Name')
        year_col = next((col for col in metro_cols if col.upper() == 'YEAR'), 'Year')
        month_col = next((col for col in metro_cols if col.upper() == 'MONTH'), 'Month')
        hpi_col = next((col for col in metro_cols if col.upper() == 'HOME_PRICE_INDEX'), 'Home_Price_Index')
        
        mapping_cols = moodys_mapping.columns
        geography_col = next((col for col in mapping_cols if col.upper() == 'GEOGRAPHY'), 'Geography')
        fip_col = next((col for col in mapping_cols if col.upper() == 'FIP'), 'FIP')
        
        metro_with_fip = clv4_msa_extract.join(
            moodys_mapping.select([
                pl.col(geography_col).str.replace_all(r"[^a-zA-Z0-9\s]", "").str.to_uppercase().alias("cbsa_name_clean"),
                pl.col(fip_col).alias("CBSA_Code")
            ]),
            left_on=pl.col(cbsa_name_col).str.replace_all(r"[^a-zA-Z0-9\s]", "").str.to_uppercase(),
            right_on="cbsa_name_clean",
            how="left"
        )
        
        metro_with_yyyymm = metro_with_fip.with_columns([
            pl.when(pl.col(month_col) < 10)
            .then(pl.col(year_col).cast(pl.Utf8) + "0" + pl.col(month_col).cast(pl.Utf8))
            .otherwise(pl.col(year_col).cast(pl.Utf8) + pl.col(month_col).cast(pl.Utf8))
            .alias("YYYYMM")
        ])
        
        filtered_data = metro_with_yyyymm.filter(pl.col("YYYYMM").cast(pl.Int32) <= 202503)
        
        return filtered_data
    
    def _combine_data(self, state_data: pl.DataFrame, metro_data: pl.DataFrame) -> pl.DataFrame:
        # Get correct column names
        state_cols = state_data.columns
        state_code_col = next((col for col in state_cols if col.upper() == 'STATE_CODE'), 'State_Code')
        state_name_col = next((col for col in state_cols if col.upper() == 'STATE_NAME'), 'State_Name')
        hpi_col_state = next((col for col in state_cols if col.upper() == 'HOME_PRICE_INDEX'), 'Home_Price_Index')
        
        metro_cols = metro_data.columns
        cbsa_code_col = next((col for col in metro_cols if col.upper() == 'CBSA_CODE'), 'CBSA_Code')
        cbsa_name_col = next((col for col in metro_cols if col.upper() == 'CBSA_NAME'), 'CBSA_Name')
        hpi_col_metro = next((col for col in metro_cols if col.upper() == 'HOME_PRICE_INDEX'), 'Home_Price_Index')
        
        state_renamed = state_data.select([
            pl.col(state_code_col).alias("Code"),
            pl.col(state_name_col).alias("Name"),
            pl.col("YYYYMM"),
            pl.col(hpi_col_state).alias("Home_Price_Index")
        ])
        
        metro_renamed = metro_data.select([
            pl.col(cbsa_code_col).alias("Code"),
            pl.col(cbsa_name_col).alias("Name"),
            pl.col("YYYYMM"),
            pl.col(hpi_col_metro).alias("Home_Price_Index")
        ])
        
        combined = pl.concat([state_renamed, metro_renamed])
        
        combined_with_date = combined.with_columns([
            pl.col("YYYYMM").str.slice(0, 4).cast(pl.Int32).alias("Year"),
            pl.col("YYYYMM").str.slice(4, 2).cast(pl.Int32).alias("Month")
        ]).with_columns([
            pl.date(pl.col("Year"), pl.col("Month"), 1).alias("date")
        ])
        
        combined_with_quarters = combined_with_date.with_columns([
            pl.when(pl.col("Month").is_in([1, 2, 3])).then(pl.lit("Q1"))
            .when(pl.col("Month").is_in([4, 5, 6])).then(pl.lit("Q2"))
            .when(pl.col("Month").is_in([7, 8, 9])).then(pl.lit("Q3"))
            .when(pl.col("Month").is_in([10, 11, 12])).then(pl.lit("Q4"))
            .alias("QtrDt")
        ])
        
        sorted_data = combined_with_quarters.sort(["Code", "date"]).unique(["Code", "date"])
        
        with_sa = self._add_seasonal_adjustment(sorted_data)
        
        quarterly_data = self._convert_to_quarterly(with_sa)
        
        with_yoy = self._calculate_yoy_changes(quarterly_data)
        
        return with_yoy
    
    def _add_seasonal_adjustment(self, data: pl.DataFrame) -> pl.DataFrame:
        return data.with_columns([
            pl.col("Home_Price_Index").alias("HPI_SA")
        ])
    
    def _convert_to_quarterly(self, data: pl.DataFrame) -> pl.DataFrame:
        quarterly = data.group_by(["Code", "Name", "QtrDt"]).agg([
            pl.col("date").max().alias("date"),
            pl.col("Home_Price_Index").mean().alias("HPI"),
            pl.col("HPI_SA").mean().alias("HPI_SA")
        ])
        
        return quarterly.sort(["Code", "date"])
    
    def _calculate_yoy_changes(self, data: pl.DataFrame) -> pl.DataFrame:
        with_lags = data.with_columns([
            pl.col("HPI_SA").shift(4).over("Code").alias("HPI_SA_lag4"),
            pl.col("HPI_SA").shift(1).over("Code").alias("HPI_SA_lag1")
        ])
        
        with_changes = with_lags.with_columns([
            ((pl.col("HPI_SA") / pl.col("HPI_SA_lag4")) - 1).alias("YOY_CoreLogicV4"),
            (pl.col("HPI_SA").log() - pl.col("HPI_SA_lag1").log()).alias("DLOG_CoreLogicV4")
        ])
        
        return with_changes.filter(~pl.col("Name").str.contains("Micropolitan"))

# FILE: src/gemini_scenario_models/hpi_projection_us/data_projection.py
import polars as pl
import numpy as np
from datetime import date, timedelta
from typing import Dict, List, Tuple
from dependencies import Constants, Params
from Utils.glm_model_architecture import HPIGLMModel

class DataProjection:
    def __init__(self, params: Params):
        self.params = params
    
    def run_state_forecast(
        self,
        scenario: str,
        region: str,
        national_data: pl.DataFrame,
        scenario_hpi_data: pl.DataFrame,
        regional_data: pl.DataFrame
    ) -> Dict[str, pl.DataFrame]:
        
        national_merged = self._merge_national_data(national_data, scenario_hpi_data)
        master_data = self._create_master_panel(regional_data, national_merged)
        model_results = self._run_glm_model(master_data, scenario, region)
        forecast_data = self._convert_to_hpi(model_results, scenario)
        final_results = self._prepare_final_output(forecast_data, scenario, region)
        
        return final_results
    
    def run_metro_forecast(
        self,
        scenario: str,
        region: str,
        national_data: pl.DataFrame,
        scenario_hpi_data: pl.DataFrame,
        regional_data: pl.DataFrame,
        state_results: pl.DataFrame,
        state_metro_map: pl.DataFrame,
        moodys_mapping: pl.DataFrame
    ) -> Dict[str, pl.DataFrame]:
        
        national_merged = self._merge_national_data(national_data, scenario_hpi_data)
        master_data = self._create_master_panel(regional_data, national_merged)
        state_mapped = self._add_state_data(master_data, state_results, state_metro_map, moodys_mapping)
        model_results = self._run_metro_glm_model(state_mapped, scenario, region)
        forecast_data = self._convert_to_hpi(model_results, scenario)
        final_results = self._prepare_final_output(forecast_data, scenario, region)
        
        return final_results
    
    def _merge_national_data(self, national_data: pl.DataFrame, scenario_hpi_data: pl.DataFrame) -> pl.DataFrame:
        # Handle case sensitivity in column names
        scenario_cols = scenario_hpi_data.columns
        date_col = next((col for col in scenario_cols if col.upper() in ['DATE', 'F_DATE']), 'date')
        hpi_col = next((col for col in scenario_cols if col.upper() == 'CORELOGIC_V4'), 'CORELOGIC_V4')
        
        national_with_scenario = national_data.join(
            scenario_hpi_data.select([
                pl.col(date_col).alias("date1"),
                pl.col(hpi_col).alias("CORELOGIC_V4")
            ]),
            left_on="date",
            right_on="date1",
            how="outer"
        )
        
        cleaned_national = national_with_scenario.filter(
            ~((pl.col("date").is_not_null()) & (pl.col("date1") == date(2025, 3, 31)))
        )
        
        final_national = cleaned_national.with_columns([
            pl.when(pl.col("date").is_null()).then(pl.col("date1")).otherwise(pl.col("date")).alias("date"),
            pl.when(pl.col("HPI_SA").is_null()).then(pl.col("CORELOGIC_V4")).otherwise(pl.col("HPI_SA")).alias("HPI_SA")
        ])
        
        final_national = final_national.with_columns([
            pl.col("HPI_SA").shift(4).alias("HPI_SA_lag4"),
            pl.col("HPI_SA").shift(1).alias("HPI_SA_lag1")
        ]).with_columns([
            ((pl.col("HPI_SA") / pl.col("HPI_SA_lag4")) - 1).alias("YOY_CoreLogicV4"),
            (pl.col("HPI_SA").log() - pl.col("HPI_SA_lag1").log()).alias("DLOG_CoreLogicV4")
        ])
        
        return final_national.filter(pl.col("date") >= date(2000, 1, 1))
    
    def _create_master_panel(self, regional_data: pl.DataFrame, national_data: pl.DataFrame) -> pl.DataFrame:
        codes = regional_data.select("Name").unique().with_columns(pl.lit(1).alias("ind"))
        dates = national_data.select("date").unique().with_columns(pl.lit(1).alias("ind"))
        
        master = codes.join(dates, on="ind").drop("ind")
        
        master_with_regional = master.join(
            regional_data,
            left_on=["date", "Name"],
            right_on=["date", "Name"],
            how="left"
        )
        
        master_with_national = master_with_regional.join(
            national_data.select([
                "date",
                pl.col("YOY_CoreLogicV4").alias("YOY_CoreLogicV4_US"),
                pl.col("DLOG_CoreLogicV4").alias("DLOG_CoreLogicV4_US")
            ]),
            on="date",
            how="left"
        )
        
        return master_with_national
    
    def _run_glm_model(self, data: pl.DataFrame, scenario: str, region: str) -> pl.DataFrame:
        train_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.REGRESSION_END_DATE)
        )
        
        forecast_data = data.filter(pl.col("date") >= Constants.FORECAST_START_DATE)
        
        model = HPIGLMModel(
            target_col="DLOG_CoreLogicV4",
            categorical_cols=["Name"],
            continuous_cols=["DLOG_CoreLogicV4_US"]
        )
        
        model.fit(train_data.drop_nulls())
        
        scored_data = model.score_data(forecast_data, "Pred")
        
        history_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.LAST_HISTORY_DATE)
        ).with_columns(pl.lit(None, dtype=pl.Float64).alias("Pred"))
        
        combined = pl.concat([history_data, scored_data]).sort(["Name", "date"])
        
        return combined
    
    def _run_metro_glm_model(self, data: pl.DataFrame, scenario: str, region: str) -> pl.DataFrame:
        train_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.REGRESSION_END_DATE)
        )
        
        forecast_data = data.filter(pl.col("date") >= Constants.FORECAST_START_DATE)
        
        model = HPIGLMModel(
            target_col="DLOG_CoreLogicV4",
            categorical_cols=["Name"],
            continuous_cols=["DLOG_CoreLogicV4_St"]
        )
        
        model.fit(train_data.drop_nulls())
        
        scored_data = model.score_data(forecast_data, "Pred")
        
        history_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.LAST_HISTORY_DATE)
        ).with_columns(pl.lit(None, dtype=pl.Float64).alias("Pred"))
        
        combined = pl.concat([history_data, scored_data]).sort(["Name", "date"])
        
        return combined
    
    def _add_state_data(
        self,
        master_data: pl.DataFrame,
        state_results: pl.DataFrame,
        state_metro_map: pl.DataFrame,
        moodys_mapping: pl.DataFrame
    ) -> pl.DataFrame:
        
        # Handle case sensitivity
        map_cols = state_metro_map.columns
        cbsa_code_col = next((col for col in map_cols if col.upper() == 'CBSA_CODE'), 'CBSA_Code')
        cbsa_name_col = next((col for col in map_cols if col.upper() == 'CBSA_NAME'), 'CBSA_Name')
        st_col = next((col for col in map_cols if col.upper() == 'ST'), 'ST')
        
        mapping_cols = moodys_mapping.columns
        geography_col = next((col for col in mapping_cols if col.upper() == 'GEOGRAPHY'), 'Geography')
        geocode_col = next((col for col in mapping_cols if col.upper() == 'GEOCODE'), 'Geocode')
        
        state_metro_enhanced = state_metro_map.join(
            moodys_mapping,
            left_on=st_col,
            right_on=geocode_col,
            how="left"
        )
        
        state_with_metro = state_results.join(
            state_metro_enhanced.select([
                pl.col(geography_col).str.to_uppercase(),
                pl.col(cbsa_code_col)
            ]),
            left_on=pl.col("CBSA_name").str.to_uppercase(),
            right_on=pl.col(geography_col).str.to_uppercase(),
            how="left"
        )
        
        master_with_state = master_data.join(
            state_with_metro.select([
                "date",
                pl.col(cbsa_code_col),
                pl.col("HPI").alias("CoreLogicV4_St")
            ]),
            left_on=["date", pl.col("Code").cast(pl.Utf8)],
            right_on=["date", pl.col(cbsa_code_col)],
            how="left"
        )
        
        master_with_state = master_with_state.with_columns([
            pl.col("CoreLogicV4_St").shift(1).over("Name").alias("CoreLogicV4_St_lag1")
        ]).with_columns([
            (pl.col("CoreLogicV4_St").log() - pl.col("CoreLogicV4_St_lag1").log()).alias("DLOG_CoreLogicV4_St")
        ])
        
        return master_with_state
    
    def _convert_to_hpi(self, model_results: pl.DataFrame, scenario: str) -> pl.DataFrame:
        hpi_col_name = f"HPIPred_{scenario}"
        
        with_hpi = model_results.with_columns([
            pl.lit(None, dtype=pl.Float64).alias(hpi_col_name)
        ])
        
        result_list = []
        for name in with_hpi["Name"].unique():
            name_data = with_hpi.filter(pl.col("Name") == name).sort("date")
            
            hpi_values = []
            current_hpi = None
            
            for row in name_data.iter_rows(named=True):
                if row["date"] == Constants.LAST_HISTORY_DATE:
                    current_hpi = row["HPI_SA"]
                    hpi_values.append(current_hpi)
                elif row["Pred"] is not None and current_hpi is not None:
                    current_hpi = current_hpi * np.exp(row["Pred"])
                    hpi_values.append(current_hpi)
                else:
                    hpi_values.append(current_hpi if current_hpi is not None else row["HPI_SA"])
            
            name_result = name_data.with_columns(
                pl.Series(hpi_values).alias(hpi_col_name)
            )
            result_list.append(name_result)



# FILE: main.py
import polars as pl
from pathlib import Path
from datetime import date
from src.gemini_scenario_models.hpi_projection_us import GLMModelScenarioProjection
from src.gemini_scenario_models.hpi_projection_us.dependencies import Params
from Utils.data_import_helpers import DataImportHelper

def main():
    params = Params(
        scenarios=["ce", "up", "dn", "dn2"],
        regions=["state", "metro"],
        input_dir="Input",
        output_dir="Output",
        last_history_date=date(2025, 3, 31),
        regression_start_date=date(2000, 3, 31),
        regression_end_date=date(2023, 6, 30),
        forecast_start_date=date(2025, 6, 30)
    )
    
    data_helper = DataImportHelper()
    
    input_data = {
        "moodys_mapping": data_helper.import_excel("Basket_2016-10-5_13_45_V2.xlsx", "Mapping"),
        "clv4_state_extract": data_helper.import_excel("HPI Data by State.xlsx", "HPI Data by State"),
        "clv4_msa_extract": data_helper.import_excel("HPI Data by CBSA.xlsx", "HPI Data by CBSA"),
        "state_metro_map": data_helper.import_excel("state_metro_map.xlsx"),
        "ce_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "CE"),
        "up_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "UP"),
        "dn_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "DN"),
        "dn2_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "DN2")
    }
    
    projection_model = GLMModelScenarioProjection(params)
    results = projection_model.run_projections(input_data)
    
    print("HPI Projection model completed successfully!")
    print(f"Generated results for {len(results)} scenario-region combinations")

if __name__ == "__main__":
    main()