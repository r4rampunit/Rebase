def MVdataTransform(cycleInfo, modelyticsMVfile, indepVarNames):
    MVData = []
    data = modelyticsMVfile.copy()
    
    # Convert date column to date type and set as index
    data['date'] = pd.to_datetime(data['date']).dt.date
    data = data.set_index('date')
    
    # Add historical values to all forecasted variables
    for aa in range(len(indepVarNames)):
        for bb in range(len(cycleInfo['Scenario'])):
            # Scenario value mapping
            scenario_val = ('Base' if (cycleInfo['Scenario'][bb] == 'Baseline') else 
                            ('Adv' if (cycleInfo['Scenario'][bb] == 'Adverse') else 
                            ('SevAdv' if (cycleInfo['Scenario'][bb] == 'Severely Adverse') else 
                            cycleInfo['Scenario'][bb])))
            
            # Construct column name
            cc = f"{indepVarNames[aa]}_{cycleInfo['Type'][0]}_{scenario_val}_{cycleInfo['Purpose'][0]}_{cycleInfo['Year'][0]}"
            
            # Fill NA values with historical values
            data[cc] = data[cc].fillna(data[indepVarNames[aa]])
    
    # Separate MVs into lists by scenarios
    for dd in range(len(cycleInfo['Scenario'])):
        # Scenario value mapping
        scenario_val = ('Base' if (cycleInfo['Scenario'][dd] == 'Baseline') else 
                        ('Adv' if (cycleInfo['Scenario'][dd] == 'Adverse') else 
                        ('SevAdv' if (cycleInfo['Scenario'][dd] == 'Severely Adverse') else 
                        cycleInfo['Scenario'][dd])))
        
        # Filter data for specific scenario
        scenario_data = data.filter(regex=f'{cycleInfo["Type"][0]}_{scenario_val}_{cycleInfo["Purpose"][0]}_{cycleInfo["Year"][0]}$')
        
        # Rename columns
        for ee in range(len(indepVarNames)):
            old_col = f"{indepVarNames[ee]}_{cycleInfo['Type'][0]}_{scenario_val}_{cycleInfo['Purpose'][0]}_{cycleInfo['Year'][0]}"
            scenario_data = scenario_data.rename(columns={old_col: indepVarNames[ee]})
        
        # Reset index and add month column
        scenario_data = scenario_data.reset_index()
        scenario_data = scenario_data.rename(columns={'index': 'date'})
        scenario_data['month'] = pd.DatetimeIndex(scenario_data['date']).month
        scenario_data = scenario_data.set_index('date')
        
        MVData.append(scenario_data)
    
    return MVData