import os
import sqlite3
import re
import pandas as pd
import io

def create_database_layers(folder_path, db_path):
    # Connect to SQLite database (will create if not exists)
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # Create Raw Layer
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS raw_layer_info (
            table_name TEXT PRIMARY KEY,
            year TEXT,
            quarter TEXT,
            row_count INTEGER
        )
    ''')

    # Process files in the folder
    for filename in os.listdir(folder_path):
        # Check if filename matches the pattern BHCF20000331.txt
        match = re.match(r'BHCF(\d{4})(\d{4})\.txt', filename)
        if match:
            year, quarter_code = match.groups()
            
            # Determine quarter based on quarter code
            quarter_map = {
                '0331': '1',
                '0630': '2', 
                '0930': '3',
                '1231': '4'
            }
            quarter = quarter_map.get(quarter_code, 'Unknown')
            
            # Create table name for raw layer
            table_name = f'BHCF_Year{year}_Quarter_{quarter}'
            
            # Read file contents
            with open(os.path.join(folder_path, filename), 'r', encoding='ISO-8859-1') as file:
                content = file.read().strip()
                
                # Create DataFrame
                df = pd.read_csv(io.StringIO(content), sep='^', header=None, names=['code'], on_bad_lines='skip')
                
                # Remove empty rows
                df = df[df['code'].notna()]
            
            # Create table for this file
            cursor.execute(f'''
                CREATE TABLE IF NOT EXISTS "{table_name}" (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    code TEXT
                )
            ''')
            
            # Insert codes into table
            df.to_sql(table_name, conn, if_exists='replace', index=False, 
                      dtype={'code': 'TEXT'})
            
            # Record table information in raw_layer_info
            cursor.execute('''
                INSERT OR REPLACE INTO raw_layer_info 
                (table_name, year, quarter, row_count) VALUES (?, ?, ?, ?)
            ''', (table_name, year, quarter, len(df)))

    # Create empty Mirror Layer tables
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mirror_layer_info (
            table_name TEXT PRIMARY KEY,
            description TEXT
        )
    ''')

    # Create empty Transformed Layer tables
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transformed_layer_info (
            table_name TEXT PRIMARY KEY,
            description TEXT
        )
    ''')

    # Commit changes and close connection
    conn.commit()
    conn.close()

    print("Database layers created successfully!")

def read_raw_layer_tables(db_path):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    
    # Read the raw_layer_info to get table names
    raw_layer_tables = pd.read_sql_query("SELECT table_name, year, quarter, row_count FROM raw_layer_info", conn)
    print("Raw Layer Tables:")
    print(raw_layer_tables)
    print("\n")
    
    # Iterate through tables and print their contents
    for _, row in raw_layer_tables.iterrows():
        table_name = row['table_name']
        
        # Read the table contents
        df = pd.read_sql_query(f'SELECT * FROM "{table_name}"', conn)
        
        print(f"Table: {table_name}")
        print(f"Year: {row['year']}, Quarter: {row['quarter']}, Rows: {row['row_count']}")
        print(df.head())  # Print first few rows
        print("\n" + "="*50 + "\n")
    
    # Close the connection
    conn.close()

# Example usage
folder_path = '/path/to/your/txt/files'
db_path = 'FRY9C_Database.sqlite'
create_database_layers(folder_path, db_path)
read_raw_layer_tables(db_path)



import sqlite3
import pandas as pd

def read_raw_layer_tables(db_path):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    
    # Read the raw_layer_info to get table names
    raw_layer_tables = pd.read_sql_query("SELECT table_name, year, quarter FROM raw_layer_info", conn)
    print("Raw Layer Tables:")
    print(raw_layer_tables)
    print("\n")
    
    # Iterate through tables and print their contents
    for _, row in raw_layer_tables.iterrows():
        table_name = row['table_name']
        
        # Read the table contents
        df = pd.read_sql_query(f'SELECT * FROM "{table_name}"', conn)
        
        print(f"Table: {table_name}")
        print(f"Year: {row['year']}, Quarter: {row['quarter']}")
        print(df)
        print("\n" + "="*50 + "\n")
    
    # Close the connection
    conn.close()

# Usage
db_path = 'FRY9C_Database.sqlite'
read_raw_layer_tables(db_path)
