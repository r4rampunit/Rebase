import os
import zipfile
import sqlite3
import pandas as pd

# Folder location where your .zip files are stored
folder_path = '/path/to/your/zip/files'

# Create an SQLite database
db_path = 'your_database.db'
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Create layers in the SQLite database
cursor.execute("CREATE SCHEMA IF NOT EXISTS Raw;")
cursor.execute("CREATE SCHEMA IF NOT EXISTS Mirror;")
cursor.execute("CREATE SCHEMA IF NOT EXISTS Transformed;")
conn.commit()

# Function to extract and load each .zip file
def load_raw_tables(folder_path):
    for filename in os.listdir(folder_path):
        if filename.endswith('.zip'):
            year = filename[4:8]  # Extract year
            quarter_code = filename[-8:-4]  # Extract quarter (0331, 0630, etc.)

            # Determine the quarter based on the last 4 digits
            quarter = {
                '0331': '1',
                '0630': '2',
                '0930': '3',
                '1231': '4'
            }.get(quarter_code, 'Unknown')

            table_name = f'BHCF_Year{year}_Quarter_{quarter}'

            # Extract the .zip file and read the data (assuming CSV inside)
            with zipfile.ZipFile(os.path.join(folder_path, filename), 'r') as zip_ref:
                for inner_file in zip_ref.namelist():
                    if inner_file.endswith('.csv'):  # Modify based on actual file format
                        with zip_ref.open(inner_file) as f:
                            df = pd.read_csv(f)
                            # Create a table in the 'Raw' layer
                            df.to_sql(f'Raw.{table_name}', conn, if_exists='replace', index=False)
                            print(f"Populated table: {table_name} in Raw layer")

# Load the Raw layer with tables
load_raw_tables(folder_path)

# Create empty tables for Mirror and Transformed layers (based on the structure of Raw)
def create_empty_mirror_and_transformed_tables():
    for table_name in cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'Raw.%'"):
        mirror_table = table_name[0].replace('Raw.', 'Mirror.')
        transformed_table = table_name[0].replace('Raw.', 'Transformed.')

        # Create an empty table in the Mirror layer
        cursor.execute(f"CREATE TABLE IF NOT EXISTS {mirror_table} AS SELECT * FROM {table_name[0]} WHERE 1=0;")
        
        # Create an empty table in the Transformed layer
        cursor.execute(f"CREATE TABLE IF NOT EXISTS {transformed_table} AS SELECT * FROM {table_name[0]} WHERE 1=0;")

        print(f"Created empty table: {mirror_table} and {transformed_table}")

    conn.commit()

# Create empty Mirror and Transformed tables
create_empty_mirror_and_transformed_tables()

# Close the database connection
conn.close()

















import sqlite3
import pandas as pd

# Path to the SQLite database
db_path = 'your_database.db'

# Connect to the database
conn = sqlite3.connect(db_path)

# Fetch the name of the first table in the Raw layer
query = "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'Raw.%' LIMIT 1;"
first_table = pd.read_sql_query(query, conn).iloc[0, 0]

# Read the data from the first table into a Pandas DataFrame
df = pd.read_sql_query(f"SELECT * FROM {first_table};", conn)

# Close the connection
conn.close()

# Display the DataFrame
print(f"Data from {first_table}:")
print(df.head())






