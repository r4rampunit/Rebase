import os
import zipfile
import sqlite3
import pandas as pd

# Folder location where your .zip files are stored
folder_path = '/path/to/your/zip/files'

# Database paths
raw_db_path = 'FRY9C_Raw.sqlite'
mirror_db_path = 'FRY9C_Mirror.sqlite'
transformed_db_path = 'FRY9C_Transformed.sqlite'

# Connect to the Raw, Mirror, and Transformed databases
raw_conn = sqlite3.connect(raw_db_path)
mirror_conn = sqlite3.connect(mirror_db_path)
transformed_conn = sqlite3.connect(transformed_db_path)

# Function to extract and load each .zip file into the Raw database
def load_raw_tables(folder_path, raw_conn):
    for filename in os.listdir(folder_path):
        if filename.endswith('.zip'):
            year = filename[4:8]  # Extract year
            quarter_code = filename[-8:-4]  # Extract quarter (0331, 0630, etc.)

            # Determine the quarter based on the last 4 digits
            quarter = {
                '0331': '1',
                '0630': '2',
                '0930': '3',
                '1231': '4'
            }.get(quarter_code, 'Unknown')

            table_name = f'BHCF_Year{year}_Quarter_{quarter}'

            # Extract the .zip file and read the data (assuming CSV inside)
            with zipfile.ZipFile(os.path.join(folder_path, filename), 'r') as zip_ref:
                for inner_file in zip_ref.namelist():
                    if inner_file.endswith('.csv'):  # Modify based on actual file format
                        with zip_ref.open(inner_file) as f:
                            df = pd.read_csv(f)
                            # Create a table in the Raw database
                            df.to_sql(table_name, raw_conn, if_exists='replace', index=False)
                            print(f"Populated table: {table_name} in Raw database")

# Load the Raw database with tables
load_raw_tables(folder_path, raw_conn)

# Function to create empty tables in the Mirror and Transformed databases based on the structure of the Raw database
def create_empty_mirror_and_transformed_tables(raw_conn, mirror_conn, transformed_conn):
    cursor = raw_conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    raw_tables = cursor.fetchall()

    for table_name in raw_tables:
        table_name = table_name[0]
        # Create empty table in Mirror database
        mirror_conn.execute(f"CREATE TABLE IF NOT EXISTS {table_name} AS SELECT * FROM {table_name} WHERE 1=0;")
        # Create empty table in Transformed database
        transformed_conn.execute(f"CREATE TABLE IF NOT EXISTS {table_name} AS SELECT * FROM {table_name} WHERE 1=0;")

        print(f"Created empty table: {table_name} in Mirror and Transformed databases")

    # Commit changes to both databases
    mirror_conn.commit()
    transformed_conn.commit()

# Create empty tables in Mirror and Transformed databases
create_empty_mirror_and_transformed_tables(raw_conn, mirror_conn, transformed_conn)

# Close the database connections
raw_conn.close()
mirror_conn.close()
transformed_conn.close()










import sqlite3
import pandas as pd

# Path to the Raw SQLite database
raw_db_path = 'FRY9C_Raw.sqlite'

# Connect to the Raw database
conn = sqlite3.connect(raw_db_path)

# Fetch the name of the first table in the Raw database
query = "SELECT name FROM sqlite_master WHERE type='table' LIMIT 1;"
first_table = pd.read_sql_query(query, conn).iloc[0, 0]

# Read the data from the first table into a Pandas DataFrame
df = pd.read_sql_query(f"SELECT * FROM {first_table};", conn)

# Close the connection
conn.close()

# Display the DataFrame
print(f"Data from {first_table}:")
print(df.head())
