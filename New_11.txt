import pandas as pd
import re

def MVdataTransform(cycleInfo, modelyticsMVfile, indepVarNames):
    """
    Transform model variables data based on cycle information and scenarios.
    
    Args:
        cycleInfo (dict): Dictionary containing cycle information including scenarios, type, and year
        modelyticsMVfile (pd.DataFrame): Input DataFrame containing model variables
        indepVarNames (list): List of independent variable names
    
    Returns:
        list: List of transformed DataFrames for each scenario
    """
    def get_scenario_val(scenario):
        scenario_mapping = {
            'Baseline': 'Base',
            'Adverse': 'Adv',
            'Severely Adverse': 'SevAdv'
        }
        return scenario_mapping.get(scenario, scenario)
    
    try:
        MVData = []
        data = modelyticsMVfile.copy()
        
        # Convert date column to date type and set as index
        data['date'] = pd.to_datetime(data['date']).dt.date
        data = data.set_index('date')
        
        # Add historical values to all forecasted variables
        for var_name in indepVarNames:
            for scenario in cycleInfo['scenarios']:
                scenario_val = get_scenario_val(scenario)
                
                # Construct column name with proper formatting
                new_col = f"{var_name}_{cycleInfo['type']}_{scenario_val}_{cycleInfo['cycle']}_{cycleInfo['year']}"
                
                # Handle the fillna operation safely
                if var_name in data.columns:
                    data[new_col] = data[new_col].fillna(data[var_name])
                else:
                    print(f"Warning: Variable {var_name} not found in data columns")
        
        # Separate MVs into lists by scenarios
        for scenario in cycleInfo['scenarios']:
            scenario_val = get_scenario_val(scenario)
            
            # Create regex pattern for filtering
            pattern = f".*_{cycleInfo['type']}_{scenario_val}_{cycleInfo['cycle']}_{cycleInfo['year']}$"
            
            # Filter columns and append to MVData
            scenario_data = data.filter(regex=pattern)
            
            # Rename columns to remove scenario suffix
            rename_dict = {}
            for col in scenario_data.columns:
                base_name = col.split('_')[0]  # Get the base variable name
                if base_name in indepVarNames:
                    rename_dict[col] = base_name
            
            scenario_data = scenario_data.rename(columns=rename_dict)
            
            # Add month column and reset index
            scenario_data = scenario_data.reset_index()
            scenario_data['month'] = pd.to_datetime(scenario_data['date']).dt.month
            scenario_data = scenario_data.set_index('date')
            
            MVData.append(scenario_data)
        
        return MVData
    
    except Exception as e:
        print(f"Error in MVdataTransform: {str(e)}")
        print("Available columns:", data.columns.tolist())
        print("Attempted scenario values:", [get_scenario_val(s) for s in cycleInfo['scenarios']])
        raise

# Example usage:
"""
cycleInfo = {
    'scenarios': ['Baseline', 'Adverse', 'Severely Adverse'],
    'type': 'BHC',
    'cycle': 'CCAR',
    'year': 2024
}
modelyticsMVfile = pd.DataFrame(...)  # Your input DataFrame
indepVarNames = ['FGOP_US_AD', ...]  # Your variable names
result = MVdataTransform(cycleInfo, modelyticsMVfile, indepVarNames)
"""