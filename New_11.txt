import os
import zipfile
import sqlite3
import re
import pandas as pd
import io

def process_zip_files(zip_folder_path, db_path):
    # Connect to SQLite database
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # Create Raw Layer Info Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS raw_layer_info (
            table_name TEXT PRIMARY KEY,
            year TEXT,
            quarter TEXT,
            row_count INTEGER
        )
    ''')

    # Process each ZIP file in the folder
    for zip_filename in os.listdir(zip_folder_path):
        if zip_filename.endswith('.zip') or zip_filename.endswith('.ZIP'):
            zip_file_path = os.path.join(zip_folder_path, zip_filename)
            
            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
                # Find .txt file in ZIP 
                text_filename = zip_filename.replace('.zip', '.txt').replace('.ZIP', '.txt')
                
                if text_filename in zip_ref.namelist():
                    # Open and read the .txt file
                    with zip_ref.open(text_filename) as text_file:
                        # Read with ISO-8859-1 encoding
                        file_contents = text_file.read().decode('ISO-8859-1')
                        
                        # Create DataFrame
                        df = pd.read_csv(io.StringIO(file_contents), sep='^', header=None, names=['code'], on_bad_lines='skip')
                        df = df[df['code'].notna()]
                        
                        # Extract year and quarter from filename
                        match = re.match(r'BHCF(\d{4})(\d{4})\.txt', text_filename)
                        if match:
                            year, quarter_code = match.groups()
                            
                            quarter_map = {
                                '0331': '1', '0630': '2', 
                                '0930': '3', '1231': '4'
                            }
                            quarter = quarter_map.get(quarter_code, 'Unknown')
                            
                            # Create table name
                            table_name = f'BHCF_Year{year}_Quarter_{quarter}'
                            
                            # Drop table if exists to avoid duplicates
                            cursor.execute(f'DROP TABLE IF EXISTS "{table_name}"')
                            
                            # Create table with explicit schema
                            cursor.execute(f'''
                                CREATE TABLE "{table_name}" (
                                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                                    code TEXT
                                )
                            ''')
                            
                            # Insert data directly
                            insert_query = f'INSERT INTO "{table_name}" (code) VALUES (?)'
                            cursor.executemany(insert_query, [(code,) for code in df['code']])
                            
                            # Record table information
                            cursor.execute('''
                                INSERT OR REPLACE INTO raw_layer_info 
                                (table_name, year, quarter, row_count) 
                                VALUES (?, ?, ?, ?)
                            ''', (table_name, year, quarter, len(df)))

    # Create layer info tables
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mirror_layer_info (
            table_name TEXT PRIMARY KEY,
            description TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transformed_layer_info (
            table_name TEXT PRIMARY KEY,
            description TEXT
        )
    ''')

    # Commit and close
    conn.commit()
    conn.close()

    print("Database processed successfully!")

def read_raw_layer_tables(db_path):
    conn = sqlite3.connect(db_path)
    
    # Read raw layer tables info
    raw_layer_tables = pd.read_sql_query(
        "SELECT table_name, year, quarter, row_count FROM raw_layer_info", 
        conn
    )
    print("Raw Layer Tables:")
    print(raw_layer_tables)
    print("\n")
    
    # Print contents of each table
    for _, row in raw_layer_tables.iterrows():
        table_name = row['table_name']
        df = pd.read_sql_query(f'SELECT * FROM "{table_name}"', conn)
        
        print(f"Table: {table_name}")
        print(f"Year: {row['year']}, Quarter: {row['quarter']}, Rows: {row['row_count']}")
        print(df.head())
        print("\n" + "="*50 + "\n")
    
    conn.close()

# Usage
zip_folder_path = '/path/to/your/zip/files'
db_path = 'FRY9C_Database.sqlite'
process_zip_files(zip_folder_path, db_path)
read_raw_layer_tables(db_path)
