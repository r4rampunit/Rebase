def transformBackDepDataQQ(self, Dep_Data_Qtr, depVar, transform, toDate, extention):
    """
    Transform back dependent data with quarterly adjustments
    
    Parameters:
        Dep_Data_Qtr: DataFrame containing the dependent data
        depVar: Name of the dependent variable
        transform: Type of transformation to apply
        toDate: Date to start transformation from
        extention: Extension to add to column names
    """
    try:
        # Get location of the date
        te = Dep_Data_Qtr.index.get_loc(toDate)
        
        # Reset index for easier manipulation
        Dep_Data_Qtr = Dep_Data_Qtr.reset_index()
        
        # Copy initial values
        Dep_Data_Qtr.loc[te, f"{depVar}_{extention}"] = Dep_Data_Qtr.loc[te, depVar]
        
        # Apply transformations based on type
        if transform.upper() == "AQ":  # Quarterly Adjustment
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-1, f"{depVar}_{extention}"] + 
                    Dep_Data_Qtr.loc[i, f"{extention[1:]}"]
                )
                
        elif transform.upper() == "HY":  # Half-Yearly Adjustment
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-2, f"{depVar}_{extention}"] + 
                    Dep_Data_Qtr.loc[i, f"{extention[1:]}"]
                )
                
        elif transform.upper() == "AY":  # Yearly Adjustment
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-4, f"{depVar}_{extention}"] + 
                    Dep_Data_Qtr.loc[i, f"{extention[1:]}"]
                )
                
        elif transform.upper() == "PQ":  # Quarterly Percentage
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-1, f"{depVar}_{extention}"] * 
                    (1 + Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() == "PH":  # Half-Yearly Percentage
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-2, f"{depVar}_{extention}"] * 
                    (1 + Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() == "PY":  # Yearly Percentage
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-4, f"{depVar}_{extention}"] * 
                    (1 + Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() == "LAQ":  # Log Adjusted Quarterly
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-1, f"{depVar}_{extention}"] * 
                    np.exp(Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() == "LHY":  # Log Adjusted Half-Yearly
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-2, f"{depVar}_{extention}"] * 
                    np.exp(Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() == "LAY":  # Log Adjusted Yearly
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i-4, f"{depVar}_{extention}"] * 
                    np.exp(Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() == "UN":  # Unadjusted
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    np.exp(Dep_Data_Qtr.loc[i, f"{extention[1:]}"])
                )
                
        elif transform.upper() in ['NT', '3QMA', '4QMA', '12A', '4QMA', '8QMA', '9QMA']:
            for i in range(te + 1, Dep_Data_Qtr.shape[0]):
                Dep_Data_Qtr.loc[i, f"{depVar}_{extention}"] = (
                    Dep_Data_Qtr.loc[i, f"{extention[1:]}"]
                )
                
        else:
            print("\n\nError!\n\nIncorrectly defined transformation of dependent variable.\n\n")
            Dep_Data_Qtr.loc[te:te + 1, f"{depVar}_{extention}"] = np.nan
            
    except KeyError as e:
        print(f"Date {toDate} not found in index. Please check the date format and availability.")
        raise
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        raise
        
    return Dep_Data_Qtr