import numpy as np
import pandas as pd

# Alternative minimum calculation method
def safe_minimum_calculation(ds_1, J0DateD, self_depVarName, AOPproj, J0DateD_delta, endProjectionsDateD, depvarMnemonic, Q4_Avg):
    try:
        # Extract the base value
        base_value = ds_1.loc[J0DateD, self_depVarName]
        
        # Extract the projection values
        proj_values = AOPproj.loc[J0DateD + timedelta(days=1):endProjectionsDateD, depvarMnemonic]
        
        # Convert to numeric, replacing non-numeric values with NaN
        base_value = pd.to_numeric(base_value, errors='coerce')
        proj_values = pd.to_numeric(proj_values, errors='coerce')
        Q4_Avg = pd.to_numeric(Q4_Avg, errors='coerce')
        
        # Create a result Series with the same index as proj_values
        result = proj_values.copy()
        
        # Apply minimum calculation element-wise
        for idx in result.index:
            result.loc[idx] = min(
                filter(pd.notna, [
                    base_value, 
                    proj_values.loc[idx], 
                    Q4_Avg
                ])
            )
        
        return result
    
    except Exception as e:
        print(f"Error in minimum calculation: {e}")
        # Return original projection values as fallback
        return AOPproj.loc[J0DateD + timedelta(days=1):endProjectionsDateD, depvarMnemonic]

# In your main code
# Calculate Q4 Average
Q4_Avg = ds_1.loc[J0DateD - relativedelta(months=11) + relativedelta(day=31):J0DateD, self.depVarName].mean()

# Base Scenario Handling
if self.cycleInfo['scenarios'][scen] == 'Base':
    ds_1.loc[J0DateD + timedelta(days=1):endProjectionsDateD, 'pred'] = (
        AOPproj.loc[J0DateD + timedelta(days=1):endProjectionsDateD, depvarMnemonic]
    )
else:
    # For non-Base scenarios
    ds_1.loc[J0DateD + timedelta(days=1):endProjectionsDateD, 'pred'] = safe_minimum_calculation(
        ds_1, 
        J0DateD, 
        self.depVarName, 
        AOPproj, 
        timedelta(days=1), 
        endProjectionsDateD, 
        depvarMnemonic, 
        Q4_Avg
    )