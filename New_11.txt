import os
import sys

# Define the path to your images folder
SPECPATH = os.path.dirname(os.path.abspath(SPEC))
images_folder = os.path.join(SPECPATH, 'Modelytics_Code_20220110', 'images')

# Collect data folders
data_folders = [
    'CCAR2020', 'CCAR2021', 'CCAR2022', 'CCAR2023', 'CCAR2024', 
    'db', 'Modelytics_Code_20220110', 'Scenarios_Team', 'Write to ppt'
]

added_files = []

# Add existing data folders
for folder in data_folders:
    folder_path = os.path.join(SPECPATH, folder)
    if os.path.exists(folder_path):
        added_files.extend([(folder_path, folder)])

# Specifically handle images folder
if os.path.exists(images_folder):
    added_files.append((images_folder, 'images'))

# Helper function to get image path in bundled application
def get_resource_path(relative_path):
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# In your Python code, use this function to load images
# Example:
# image_path = get_resource_path('images/HSBC_logo.jpg')

a = Analysis(
    ['Modelytics_Code_20220110/Modelytics_UI_20210127.py'],
    pathex=[SPECPATH],
    binaries=[],
    datas=added_files + python_files,
    hiddenimports=hidden_imports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)




import os
import sys

def get_resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# Usage example
def load_image(image_name):
    image_path = get_resource_path(os.path.join('images', image_name))
    return image_path

# When loading an image
logo_path = load_image('HSBC_logo.jpg')




def addItem(self, text, data=None):
    item = QtGui.QStandardItem()
    
    # Convert text to string, handling various input types
    if text is None:
        text = ''
    elif not isinstance(text, str):
        text = str(text)
    
    item.setText(text)
    
    # Handle data conversion
    if data is not None:
        if not isinstance(data, str):
            data = str(data)
        item.setData(data)
    
    item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsUserCheckable)
    item.setData(Qt.Unchecked, Qt.CheckStateRole)
    self.model().appendRow(item)

def addItems(self, texts, datalist=None):
    # Ensure texts is a list
    if not isinstance(texts, list):
        texts = list(texts)
    
    # Handle case where datalist is None or shorter than texts
    if datalist is None:
        datalist = [None] * len(texts)
    elif len(datalist) < len(texts):
        datalist.extend([None] * (len(texts) - len(datalist)))
    
    for i, text in enumerate(texts):
        try:
            # Convert text to string
            if text is None:
                text = ''
            else:
                text = str(text)
            
            # Get corresponding data, defaulting to None if not available
            data = datalist[i] if i < len(datalist) else None
            
            # Add item with converted text and data
            self.addItem(text, data)
        
        except Exception as e:
            # Optional: log the error or print for debugging
            print(f"Error adding item {text}: {e}")
            continue




def addItems(self, texts, datalist=None):
    # Ensure texts is a list
    texts = texts if isinstance(texts, list) else [texts]
    
    # Handle datalist
    if datalist is None:
        datalist = [None] * len(texts)
    elif not isinstance(datalist, list):
        datalist = [datalist]
    
    # Ensure datalist is at least as long as texts
    if len(datalist) < len(texts):
        datalist.extend([None] * (len(texts) - len(datalist)))
    
    for i, text in enumerate(texts):
        try:
            # Convert text to string safely
            text = '' if text is None else str(text)
            
            # Get corresponding data
            data = datalist[i] if i < len(datalist) else None
            
            # Add item with converted text and data
            self.addItem(text, data)
        except Exception as e:
            print(f"Error adding item {text}: {e}")
            continue