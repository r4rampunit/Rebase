import pandas as pd
import sqlite3
from datetime import datetime
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def update_monthly_table(sqlite_path, excel_path):
    logger.info("Starting database update process")
    
    try:
        # Read Excel file
        logger.info("Reading Excel file...")
        df_excel = pd.read_excel(excel_path)
        
        if 'Date' not in df_excel.columns or 'FMOF14RQ_US' not in df_excel.columns:
            raise ValueError("Required columns 'Date' and 'FMOF14RQ_US' not found in Excel file")
        
        # Convert Excel Date column
        df_excel['Date'] = pd.to_datetime(df_excel['Date'])
        df_excel['Date'] = df_excel['Date'].dt.strftime('%Y-%m-%d 00:00:00')
        
        # Create SQLite connection
        logger.info("Connecting to SQLite database...")
        conn = sqlite3.connect(sqlite_path)
        
        try:
            # Verify table exists
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='MonthlyTable'")
            if not cursor.fetchone():
                raise ValueError("MonthlyTable does not exist in the database")
            
            # Read existing data - using lowercase 'date' column name for SQLite query
            logger.info("Reading existing database records...")
            df_sqlite = pd.read_sql_query("SELECT date, FMOF14RQ_US FROM MonthlyTable", conn)
            
            # Convert SQLite date column - note we're using lowercase 'date'
            df_sqlite['date'] = pd.to_datetime(df_sqlite['date'])
            df_sqlite['date'] = df_sqlite['date'].dt.strftime('%Y-%m-%d 00:00:00')
            
            # Create update query - using lowercase 'date' for SQLite
            update_query = """
            UPDATE MonthlyTable 
            SET FMOF14RQ_US = ? 
            WHERE date = ?
            """
            
            # Counter for tracking updates
            updates_count = 0
            skipped_count = 0
            
            # Iterate through Excel data
            logger.info("Updating database records...")
            for index, row in df_excel.iterrows():
                if pd.notna(row['FMOF14RQ_US']):
                    try:
                        cursor.execute(update_query, (float(row['FMOF14RQ_US']), row['Date']))
                        updates_count += cursor.rowcount
                        if cursor.rowcount == 0:
                            logger.warning(f"No matching record found for date: {row['Date']}")
                    except sqlite3.Error as e:
                        logger.error(f"Error updating record for date {row['Date']}: {str(e)}")
                else:
                    skipped_count += 1
            
            # Commit the changes
            conn.commit()
            
            logger.info(f"Update complete: {updates_count} records updated, {skipped_count} records skipped")
            
            # Verify updates
            logger.info("Verifying updates...")
            for index, row in df_excel.iterrows():
                if pd.notna(row['FMOF14RQ_US']):
                    cursor.execute(
                        "SELECT FMOF14RQ_US FROM MonthlyTable WHERE date = ?", 
                        (row['Date'],)
                    )
                    result = cursor.fetchone()
                    if result and abs(result[0] - row['FMOF14RQ_US']) > 0.0001:
                        logger.warning(f"Verification failed for date {row['Date']}")
            
        except Exception as e:
            logger.error(f"Database error occurred: {str(e)}")
            conn.rollback()
            raise
        
        finally:
            conn.close()
            logger.info("Database connection closed")
            
    except Exception as e:
        logger.error(f"Process failed: {str(e)}")
        raise

if __name__ == "__main__":
    # Replace these paths with your actual paths
    sqlite_path = "path/to/your/database.sqlite"
    excel_path = "path/to/your/excel_file.xlsx"
    
    try:
        update_monthly_table(sqlite_path, excel_path)
    except Exception as e:
        logger.error(f"Script execution failed: {str(e)}")