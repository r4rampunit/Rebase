import pandas as pd
import sqlite3
from datetime import datetime

def update_monthly_table(sqlite_path, excel_path):
    # Read Excel file
    df_excel = pd.read_excel(excel_path)
    
    # Convert Excel date column to datetime format and standardize the format
    df_excel['Date'] = pd.to_datetime(df_excel['Date'])
    df_excel['Date'] = df_excel['Date'].dt.strftime('%Y-%m-%d 00:00:00')
    
    # Create SQLite connection
    conn = sqlite3.connect(sqlite_path)
    
    try:
        # Read the existing Monthly table
        df_sqlite = pd.read_sql_query("SELECT * FROM MonthlyTable", conn)
        
        # Convert SQLite date column to the same format as Excel
        df_sqlite['Date'] = pd.to_datetime(df_sqlite['Date'])
        df_sqlite['Date'] = df_sqlite['Date'].dt.strftime('%Y-%m-%d 00:00:00')
        
        # Create update query
        update_query = """
        UPDATE MonthlyTable 
        SET FMOF14RQ_US = ? 
        WHERE Date = ?
        """
        
        # Create cursor
        cursor = conn.cursor()
        
        # Counter for tracking updates
        updates_count = 0
        
        # Iterate through Excel data and update matching records
        for index, row in df_excel.iterrows():
            if pd.notna(row['FMOF14RQ_US']):  # Only update if value is not NaN
                cursor.execute(update_query, (row['FMOF14RQ_US'], row['Date']))
                updates_count += cursor.rowcount
        
        # Commit the changes
        conn.commit()
        
        print(f"Successfully updated {updates_count} records in the database.")
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        conn.rollback()
    
    finally:
        conn.close()

# Example usage
sqlite_path = "path/to/your/database.sqlite"
excel_path = "path/to/your/excel_file.xlsx"

update_monthly_table(sqlite_path, excel_path)