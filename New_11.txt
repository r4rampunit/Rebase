import pandas as pd
import re

def MVdataTransform(cycleInfo, modelyticsMVfile, indepVarNames):
    """
    Transform model variables data with enhanced debugging
    """
    def get_scenario_val(scenario):
        scenario_mapping = {
            'Baseline': 'Base',
            'Adverse': 'Adv',
            'Severely Adverse': 'SevAdv'
        }
        return scenario_mapping.get(scenario, scenario)
    
    def construct_column_name(var_name, cycle_info, scenario):
        """Construct column name with logging"""
        scenario_val = get_scenario_val(scenario)
        col_name = f"{var_name}_{cycle_info['type']}_{scenario_val}_{cycle_info['cycle']}_{cycle_info['year']}"
        print(f"Constructed column name: {col_name}")
        return col_name, scenario_val
    
    try:
        print("\n=== Starting MVdataTransform ===")
        print("Input variables:", indepVarNames)
        print("Available columns in input data:", modelyticsMVfile.columns.tolist())
        print("Cycle Info:", cycleInfo)
        
        MVData = []
        data = modelyticsMVfile.copy()
        
        # Convert date column to date type and set as index
        data['date'] = pd.to_datetime(data['date']).dt.date
        data = data.set_index('date')
        
        # First pass: just construct and verify all column names
        all_required_columns = []
        for var_name in indepVarNames:
            for scenario in cycleInfo['scenarios']:
                col_name, _ = construct_column_name(var_name, cycleInfo, scenario)
                all_required_columns.append(col_name)
        
        print("\nAll required columns:", all_required_columns)
        print("Missing columns:", [col for col in all_required_columns if col not in data.columns])
        
        # Add historical values to all forecasted variables
        for var_name in indepVarNames:
            print(f"\nProcessing variable: {var_name}")
            for scenario in cycleInfo['scenarios']:
                col_name, scenario_val = construct_column_name(var_name, cycleInfo, scenario)
                
                if col_name not in data.columns:
                    print(f"Warning: Column {col_name} not found in data")
                    # Try alternative column name formats
                    alt_col_name = f"FGOP_US_AD_{cycleInfo['type']}_{scenario_val}_{cycleInfo['cycle']}_{cycleInfo['year']}"
                    print(f"Trying alternative column name: {alt_col_name}")
                    
                    if alt_col_name in data.columns:
                        col_name = alt_col_name
                        print(f"Found alternative column: {alt_col_name}")
                
                if var_name in data.columns and col_name in data.columns:
                    print(f"Filling NA values in {col_name} with values from {var_name}")
                    data[col_name] = data[col_name].fillna(data[var_name])
                else:
                    print(f"Skip fillna: Missing either {var_name} or {col_name}")
        
        # Separate MVs into lists by scenarios
        for scenario in cycleInfo['scenarios']:
            scenario_val = get_scenario_val(scenario)
            print(f"\nProcessing scenario: {scenario} (transformed to: {scenario_val})")
            
            # Create regex pattern for filtering
            pattern = f".*_{cycleInfo['type']}_{scenario_val}_{cycleInfo['cycle']}_{cycleInfo['year']}$"
            print(f"Using regex pattern: {pattern}")
            
            # Filter columns and append to MVData
            scenario_data = data.filter(regex=pattern)
            print(f"Filtered columns for scenario: {scenario_data.columns.tolist()}")
            
            if scenario_data.empty:
                print(f"Warning: No columns found for scenario {scenario}")
                continue
            
            # Rename columns to remove scenario suffix
            rename_dict = {}
            for col in scenario_data.columns:
                base_name = col.split('_')[0]
                if base_name in indepVarNames:
                    rename_dict[col] = base_name
            
            print(f"Renaming columns: {rename_dict}")
            scenario_data = scenario_data.rename(columns=rename_dict)
            
            # Add month column and reset index
            scenario_data = scenario_data.reset_index()
            scenario_data['month'] = pd.to_datetime(scenario_data['date']).dt.month
            scenario_data = scenario_data.set_index('date')
            
            MVData.append(scenario_data)
        
        print("\n=== MVdataTransform completed successfully ===")
        return MVData
    
    except Exception as e:
        print("\n=== Error in MVdataTransform ===")
        print(f"Error type: {type(e).__name__}")
        print(f"Error message: {str(e)}")
        print("\nDebug information:")
        print("Available columns:", modelyticsMVfile.columns.tolist())
        print("Cycle Info:", cycleInfo)
        print("Independent Variables:", indepVarNames)
        raise

# Example usage:
# cycleInfo = {
#     'scenarios': ['Baseline', 'Adverse', 'Severely Adverse'],
#     'type': 'BHC',
#     'cycle': 'CCAR',
#     'year': 2024
# }
# result = MVdataTransform(cycleInfo, modelyticsMVfile, indepVarNames)