<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload Excel File</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-image: url('/static/chart_3.jfif'); /* Specify your background image URL */
            background-size: cover;
            background-position: center;
            color: white;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .box {
            width: 500px;
            height: 280px;
            margin: 30px;
            padding: 30px;
            border-radius: 10px;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black background */
            text-align: center;
        }
        .box h2 {
            font-weight: bold;
        }
        .box p {
            font-weight: bold;
            margin-top: 10px;
        }
        .button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #007bff; /* Blue color, adjust as needed */
            color: white;
            border: 2px solid white; /* White border */
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .button:hover {
            background-color: #0056b3; /* Darker shade of blue on hover */
        }.logo {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 100px; /* Adjust width as needed */
            height: auto;
        }.file-input {
            display: inline-block;
            padding: 15px 30px;
            background-color: #007bff; /* Blue background color */
            color: white;
            border: 2px solid white; /* White border */
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .file-input:hover {
            background-color: #0056b3; /* Darker shade of blue on hover */
        }.upload-form {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 50px;
        }.upload-button {
            margin-top: 20px;
            padding: 15px 30px;
            background-color: #007bff; /* Blue background color */
            color: white;
            border: 2px solid white; /* White border */
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .upload-button:hover {
            background-color: #28a745; /* Green background color on hover */
        }
    </style>
</head>
<body>
    <img src="/static/logo_1.jfif" alt="Logo" class="logo">
    <h1>Upload Excel File</h1>
    <div class="container">
        <div class="box">
            <h1>Upload Excel File</h1>
    <form method="post" enctype="multipart/form-data" class="upload-form">
        {% csrf_token %}
        <input type="file" name="excel_file" accept=".xlsx, .xls" class="file-input">
        <button type="submit" class="upload-button">Upload</button>
    </form>
        </div>
    </div>
    <form method="post" enctype="multipart/form-data" action="dashboard" id="uploadForm" style="display: none;"></form>
</body>
</html>







































<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <!-- Plotly.js -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        /* Add your CSS styles here */
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-image: url('/static/chart_3.jfif'); /* Specify the URL of your background image */
            background-size: cover;
            background-position: center;
            color: black; /* Set text color to black */
        }

        /* Table styles */
        .table {
            border-collapse: collapse;
            overflow-x: auto; /* Enable horizontal scrolling */
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
            font-weight: bold; /* Make column names bold */
        }

        th {
            background-color: red; /* Set column headers background color */
            color: white; /* Set column headers text color */
        }

        tr:nth-child(even) {
            background-color: #f2f2f2; /* Light green background for even rows */
        }

        tr:hover {
            background-color: #ddd; /* Darker green background on hover */
        }


        h1 {
            text-align: center;
            margin-top: 30px;
        }
        .dashboard-container {
            border: 1px solid #ccc; /* Light gray border */
            border-radius: 5px; /* Rounded corners */
            padding: 20px;
            margin: 20px auto;
            max-width: 1450px; /* Limit width for better readability */
            background: url('/static/chart_2.jfif') no-repeat center center fixed, #ccc; /* Background image and gray color */
            background-size: cover;
            background-color: #ccc; /* White background */
            overflow-x: auto; /* Ensure content doesn't overflow (consider removing if needed) */
        }
        .dropdown-container label {
            font-size: 20px; /* Increase font size */
            font-weight: bold; /* Make font bold */
            color: black; /* Set text color to black */
        }

        .dropdown-container select {
            font-size: 18px; /* Increase font size */
        }

        .dropdown-container select:hover {
            border-color: #0056b3; /* Darker shade of blue on hover */
        }

        .dropdown-container select:focus {
            outline: none; /* Remove default focus outline */
            border-color: #0056b3; /* Darker shade of blue when focused */
        }

        input[type="submit"] {
            padding: 3.5px 18px; /* Adjust padding */
            font-size: 18px; /* Increase font size */
            font-weight: bold; /* Make font bold */
            color: black; /* Set text color to black */
            background-color: #007bff; /* Blue background color */
            border: 2px solid white; /* Blue border */
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        input[type="submit"]:hover {
            background-color: #0056b3; /* Darker shade of blue on hover */
        }

        .logo-container {
            text-align: right;
            margin-bottom: 20px;
        }
        .logo {
            width: 100px;
            height: auto;
            border: 1px solid #ccc; /* Light gray border */
            border-radius: 5px;
        }
        .table {
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: #fff;
            overflow-x: auto; /* Horizontal scrollbar */
        }


    </style>
</head>
<body>
    <div class="logo-container">
        <img src="/static/logo_1.jfif" alt="Logo" class="logo">
    </div>
    <h1>Dashboard</h1>
    <div class="dashboard-container">
        <form action="{% url 'dashboard' %}" method="get">
            <div class="dropdown-container">
                <label for="variable">Variable:</label>
                <select name="variable" id="variable">
                    {% for option in variable_options %}
                        <option value="{{ option }}" {% if option == selected_variable %}selected{% endif %}>{{ option }}</option>
                    {% endfor %}
                </select>
                <label for="country">Country:</label>
                <select name="country" id="country">
                    {% for option in country_options %}
                        <option value="{{ option }}" {% if option == selected_country %}selected{% endif %}>{{ option }}</option>
                    {% endfor %}
                </select>
                <label for="model">Model:</label>
                <select name="model" id="model">
                    {% for option in model_options %}
                        <option value="{{ option }}" {% if option == selected_model %}selected{% endif %}>{{ option }}</option>
                    {% endfor %}
                </select>
                <input type="submit" value="Submit">
            </div>
        </form>

        {% if plot_div_single %}
            {{ plot_div_single|safe }}
        {% endif %}

        {% if filtered_data %}
            <h2>Data</h2>
            <table>
                <thead>
                    <tr>
                        {% for column in filtered_data.0.keys %}
                            <th>{{ column }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody>
                    {% for row in filtered_data %}
                        <tr>
                            {% for value in row.values %}
                                <td>{{ value }}</td>
                            {% endfor %}
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p>No data available for the selected options.</p>
        {% endif %}
    </div>
</body>
</html>


































def dashboard(request):
    data = request.session.get("data", [])
    variable_options = request.session.get('variable_options', [])
    country_options = request.session.get('country_options', [])
    model_options = request.session.get('model_options', [])

    selected_variable = request.GET.get('variable', variable_options[0] if variable_options else None)
    selected_country = request.GET.get('country', country_options[0] if country_options else None)
    selected_model = request.GET.get('model', model_options[0] if model_options else None)

    # Convert data to DataFrame
    df = pd.DataFrame(data)

    # Filter country options based on selected variable
    filtered_country_options = sorted(df[df['Variable'] == selected_variable]['Region'].unique().tolist())

    # Update session variable for country options
    request.session['country_options'] = filtered_country_options

    # Filter model options based on selected variable and country
    filtered_model_options = sorted(df[(df['Variable'] == selected_variable) &
                                       (df['Region'] == selected_country)]['Model'].unique().tolist())

    # Update session variable for model options
    request.session['model_options'] = filtered_model_options

    # Filter the DataFrame based on selected filters
    filtered_data = df[(df['Variable'] == selected_variable) &
                      (df['Region'] == selected_country) &
                      (df['Model'] == selected_model)]

    if not filtered_data.empty:
        # Filter the DataFrame to keep only rows with unique scenarios
        unique_scenarios = filtered_data['Scenario'].unique()
        filtered_data_unique = filtered_data.drop_duplicates(subset=['Scenario'])

        # Convert the filtered DataFrame to a dictionary of records
        filtered_data_dict = filtered_data_unique.to_dict('records')
    else:
        filtered_data_dict = []

    if not filtered_data.empty:
        years = [2020, 2025, 2030, 2035, 2040, 2045, 2050]
        traces = []

        for scenario, scenario_data in filtered_data.groupby('Scenario'):
            trace = go.Scatter(
                x=years,
                y=scenario_data[years].values.flatten(),
                mode='lines+markers',
                name=scenario
            )
            traces.append(trace)

        # Create the multiline plot
        layout = go.Layout(
            title=selected_variable,
            xaxis=dict(title="Year", showgrid=False, tickfont=dict(color='black')),
            yaxis=dict(title="Value", showgrid=False, tickfont=dict(color="black")),
            height=750,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)'
        )

        fig_single = go.Figure(data=traces, layout=layout)
        plot_div_single = plot(fig_single, output_type='div', include_plotlyjs=False)
    else:
        plot_div_single = None

    context = {
        'variable_options': variable_options,
        'country_options': filtered_country_options,
        'model_options': filtered_model_options,  # Use filtered model options
        'selected_variable': selected_variable,
        'selected_country': selected_country,
        'selected_model': selected_model,
        'filtered_data': filtered_data_dict,
        'plot_div_single': plot_div_single,
    }

    return render(request, 'dashboard.html', context)


















import pandas as pd
import plotly.graph_objs as go
from plotly.offline import plot

def dashboard(request):

    # Load data from Excel file
    df = pd.read_excel("static/data/data_dashboard.xlsx")

    selected_variable = request.GET.get('variable', None)
    selected_country = request.GET.get('country', None)
    selected_model = request.GET.get("model", None)

    if selected_variable and selected_country and selected_model:
        # Filter the DataFrame based on selected filters
        filtered_data = df[(df['Variable'] == selected_variable) &
                           (df['Region'] == selected_country) &
                           (df['Model'] == selected_model)]

        if not filtered_data.empty:
            # Check if filtered data is not empty
            years = [2020, 2025, 2030, 2035, 2040, 2045, 2050]
            traces = []

            for scenario, scenario_data in filtered_data.groupby('Scenario'):
                trace = go.Scatter(
                    x=years,
                    y=scenario_data[years].values.flatten(),
                    mode='lines+markers',
                    line=dict(width=5, shape='spline'),
                    name=scenario
                )
                traces.append(trace)

            # Create the multiline plot
            layout = go.Layout(
                title=selected_variable,
                xaxis=dict(title='Year', showgrid=False, tickfont=dict(color="black")),
                yaxis=dict(title='Value', showgrid=False, tickfont=dict(color="black")),
                height=750,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(8,8,8,8)'
            )

            fig = go.Figure(data=traces, layout=layout)
            plot_div_single = plot(fig, output_type='div', include_plotlyjs=False)

        else:
            plot_div_single = None

    else:
        filtered_data = None
        plot_div_single = None

    context = {
        'variable_options': df['Variable'].unique().tolist(),
        'country_options': df['Country'].unique().tolist(),
        'model_options': df['Model'].unique().tolist(),
        'selected_variable': selected_variable,
        'selected_country': selected_country,
        'selected_model': selected_model,
        'filtered_data': filtered_data,
        'plot_div_single': plot_div_single,
    }

    return render(request, 'dashboard.html', context)
