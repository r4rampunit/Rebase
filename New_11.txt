# ====================================================================================
# FILE: Utils/data_import_helpers.py
# LOCATION: Utils/data_import_helpers.py
# ====================================================================================
import polars as pl
from pathlib import Path
from typing import Optional

class DataImportHelper:
    def __init__(self, input_dir: str = "Input"):
        self.input_dir = Path(input_dir)
    
    def import_excel(self, filename: str, sheet_name: Optional[str] = None) -> pl.DataFrame:
        file_path = self.input_dir / filename
        df = pl.read_excel(file_path, sheet_name=sheet_name)
        
        # Auto-detect and convert date columns from string format
        for col in df.columns:
            if col.lower() in ['date', 'f_date']:
                if df[col].dtype == pl.Utf8:
                    try:
                        df = df.with_columns([
                            pl.col(col).str.to_date("%m/%d/%Y").alias(col)
                        ])
                    except:
                        try:
                            df = df.with_columns([
                                pl.col(col).str.to_date("%Y-%m-%d").alias(col)
                            ])
                        except:
                            pass
        
        return df
    
    def export_csv(self, data: pl.DataFrame, filename: str, output_dir: str = "Output") -> None:
        output_path = Path(output_dir) / filename
        output_path.parent.mkdir(parents=True, exist_ok=True)
        data.write_csv(output_path)
    
    def export_excel(self, data: pl.DataFrame, filename: str, sheet_name: str = "Sheet1", output_dir: str = "Output") -> None:
        output_path = Path(output_dir) / filename
        output_path.parent.mkdir(parents=True, exist_ok=True)
        data.write_excel(output_path, worksheet=sheet_name)


# ====================================================================================
# FILE: Utils/glm_model_architecture.py
# LOCATION: Utils/glm_model_architecture.py
# ====================================================================================
import polars as pl
import numpy as np
from sklearn.linear_model import LinearRegression
from typing import List
import pandas as pd

class HPIGLMModel:
    def __init__(self, target_col: str, categorical_cols: List[str], continuous_cols: List[str]):
        self.model = LinearRegression(fit_intercept=False)
        self.target_col = target_col
        self.categorical_cols = categorical_cols
        self.continuous_cols = continuous_cols
        self.is_fitted = False
        self.fitted_categories = {}
    
    def prepare_features(self, data: pl.DataFrame) -> np.ndarray:
        features = []
        
        for cat_col in self.categorical_cols:
            if not self.is_fitted:
                unique_vals = data[cat_col].unique().to_list()
                self.fitted_categories[cat_col] = unique_vals
            
            cat_data = data.select(cat_col).to_pandas()
            encoded = pd.get_dummies(cat_data, drop_first=True, dtype=float)
            features.append(encoded.values)
        
        for cont_col in self.continuous_cols:
            cont_data = data.select(cont_col).to_numpy().reshape(-1, 1)
            features.append(cont_data)
        
        if features:
            return np.hstack(features)
        else:
            return np.array([]).reshape(len(data), 0)
    
    def prepare_target(self, data: pl.DataFrame) -> np.ndarray:
        return data.select(self.target_col).to_numpy().ravel()
    
    def fit(self, train_data: pl.DataFrame):
        X = self.prepare_features(train_data)
        y = self.prepare_target(train_data)
        self.model.fit(X, y)
        self.is_fitted = True
        return self
    
    def predict(self, data: pl.DataFrame) -> np.ndarray:
        if not self.is_fitted:
            raise ValueError("Model must be fitted before prediction")
        X = self.prepare_features(data)
        return self.model.predict(X)
    
    def score_data(self, data: pl.DataFrame, prediction_col: str = "Pred") -> pl.DataFrame:
        predictions = self.predict(data)
        return data.with_columns(pl.Series(name=prediction_col, values=predictions))


# ====================================================================================
# FILE: Utils/__init__.py
# LOCATION: Utils/__init__.py
# ====================================================================================
from .data_import_helpers import DataImportHelper
from .glm_model_architecture import HPIGLMModel

__all__ = ["DataImportHelper", "HPIGLMModel"]


# ====================================================================================
# FILE: src/gemini_scenario_models/__init__.py
# LOCATION: src/gemini_scenario_models/__init__.py
# ====================================================================================
pass


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/__init__.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/__init__.py
# ====================================================================================
from .model import GLMModelScenarioProjection

__all__ = ["GLMModelScenarioProjection"]


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/__init__.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/dependencies/__init__.py
# ====================================================================================
from ._constants import Constants
from ._parameters import Params

__all__ = ["Constants", "Params"]


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_constants.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/dependencies/_constants.py
# ====================================================================================
from datetime import date

class Constants:
    LAST_HISTORY_DATE = date(2025, 3, 31)
    REGRESSION_START_DATE = date(2000, 3, 31)
    REGRESSION_END_DATE = date(2023, 6, 30)
    FORECAST_START_DATE = date(2025, 6, 30)


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_parameters.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/dependencies/_parameters.py
# ====================================================================================
from dataclasses import dataclass
from typing import List
from datetime import date

@dataclass
class Params:
    scenarios: List[str]
    regions: List[str]
    input_dir: str
    output_dir: str
    last_history_date: date
    regression_start_date: date
    regression_end_date: date
    forecast_start_date: date


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_dataclasses.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/dependencies/_dataclasses.py
# ====================================================================================
from dataclasses import dataclass
from typing import Optional
from datetime import date

@dataclass
class CLV4Combined:
    code: str
    name: str
    date: date
    home_price_index: float
    hpi_sa: Optional[float] = None
    yoy_corelogicv4: Optional[float] = None
    dlog_corelogicv4: Optional[float] = None

@dataclass
class NationalHPI:
    date: date
    corelogic_v4: float

@dataclass
class StateMetroMap:
    cbsa_code: str
    cbsa_name: str
    st: str

@dataclass
class MoodysMapping:
    geography: str
    fip: str
    geocode: Optional[str] = None


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/dependencies/_schemas.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/dependencies/_schemas.py
# ====================================================================================
import polars as pl

CLV4_COMBINED_SCHEMA = {
    "Code": pl.Utf8,
    "Name": pl.Utf8,
    "date": pl.Date,
    "Home_Price_Index": pl.Float64,
    "HPI_SA": pl.Float64,
    "YOY_CoreLogicV4": pl.Float64,
    "DLOG_CoreLogicV4": pl.Float64,
}

NATIONAL_HPI_SCHEMA = {
    "date": pl.Date,
    "CORELOGIC_V4": pl.Float64,
}

STATE_METRO_MAP_SCHEMA = {
    "CBSA_Code": pl.Utf8,
    "CBSA_Name": pl.Utf8,
    "ST": pl.Utf8,
}

MOODYS_MAPPING_SCHEMA = {
    "Geography": pl.Utf8,
    "FIP": pl.Utf8,
    "Geocode": pl.Utf8,
}


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/data_preparation.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/data_preparation.py
# ====================================================================================
import polars as pl
from datetime import date
from typing import Tuple

class DataPreparation:
    def __init__(self, params):
        self.params = params
    
    def run_data_prep(
        self,
        clv4_state_extract: pl.DataFrame,
        clv4_msa_extract: pl.DataFrame,
        moodys_mapping: pl.DataFrame
    ) -> Tuple[pl.DataFrame, pl.DataFrame, pl.DataFrame]:
        state_data = self._prepare_state_data(clv4_state_extract, moodys_mapping)
        metro_data = self._prepare_metro_data(clv4_msa_extract, moodys_mapping)
        combined_data = self._combine_data(state_data, metro_data)
        return state_data, metro_data, combined_data
    
    def _prepare_state_data(self, clv4_state_extract: pl.DataFrame, moodys_mapping: pl.DataFrame) -> pl.DataFrame:
        # Get exact column names
        state_name_col = "State Name" if "State Name" in clv4_state_extract.columns else "State_Name"
        year_col = "Year"
        month_col = "Month"
        hpi_col = "Home Price Index" if "Home Price Index" in clv4_state_extract.columns else "Home_Price_Index"
        
        geography_col = "Geography"
        fip_col = "FIP"
        
        # Month name to number mapping
        month_map = {
            "January": "01", "February": "02", "March": "03", "April": "04",
            "May": "05", "June": "06", "July": "07", "August": "08",
            "September": "09", "October": "10", "November": "11", "December": "12"
        }
        
        state_with_fip = clv4_state_extract.join(
            moodys_mapping.select([
                pl.col(geography_col).str.to_uppercase().alias("state_name_upper"),
                pl.col(fip_col).alias("State_Code")
            ]),
            left_on=pl.col(state_name_col).str.to_uppercase(),
            right_on="state_name_upper",
            how="left"
        )
        
        state_with_yyyymm = state_with_fip.with_columns([
            pl.col(month_col).map_elements(lambda x: month_map.get(x, "01"), return_dtype=pl.Utf8).alias("month_str")
        ]).with_columns([
            (pl.col(year_col).cast(pl.Utf8) + pl.col("month_str")).alias("YYYYMM")
        ])
        
        filtered_data = state_with_yyyymm.filter(pl.col("YYYYMM").cast(pl.Int32) <= 202503)
        
        return filtered_data.select([
            "State_Code",
            pl.col(state_name_col).alias("State_Name"),
            "YYYYMM",
            pl.col(hpi_col).alias("Home_Price_Index")
        ])
    
    def _prepare_metro_data(self, clv4_msa_extract: pl.DataFrame, moodys_mapping: pl.DataFrame) -> pl.DataFrame:
        # Get exact column names
        cbsa_name_col = "CBSA Name" if "CBSA Name" in clv4_msa_extract.columns else "CBSA_Name"
        year_col = "Year"
        month_col = "Month"
        hpi_col = "Home Price Index" if "Home Price Index" in clv4_msa_extract.columns else "Home_Price_Index"
        
        geography_col = "Geography"
        fip_col = "FIP"
        
        # Month name to number mapping
        month_map = {
            "January": "01", "February": "02", "March": "03", "April": "04",
            "May": "05", "June": "06", "July": "07", "August": "08",
            "September": "09", "October": "10", "November": "11", "December": "12"
        }
        
        metro_with_fip = clv4_msa_extract.join(
            moodys_mapping.select([
                pl.col(geography_col).str.replace_all(r"[^a-zA-Z0-9\s]", "").str.to_uppercase().alias("cbsa_name_clean"),
                pl.col(fip_col).alias("CBSA_Code")
            ]),
            left_on=pl.col(cbsa_name_col).str.replace_all(r"[^a-zA-Z0-9\s]", "").str.to_uppercase(),
            right_on="cbsa_name_clean",
            how="left"
        )
        
        metro_with_yyyymm = metro_with_fip.with_columns([
            pl.col(month_col).map_elements(lambda x: month_map.get(x, "01"), return_dtype=pl.Utf8).alias("month_str")
        ]).with_columns([
            (pl.col(year_col).cast(pl.Utf8) + pl.col("month_str")).alias("YYYYMM")
        ])
        
        filtered_data = metro_with_yyyymm.filter(pl.col("YYYYMM").cast(pl.Int32) <= 202503)
        
        return filtered_data.select([
            "CBSA_Code",
            pl.col(cbsa_name_col).alias("CBSA_Name"),
            "YYYYMM",
            pl.col(hpi_col).alias("Home_Price_Index")
        ])
    
    def _combine_data(self, state_data: pl.DataFrame, metro_data: pl.DataFrame) -> pl.DataFrame:
        state_renamed = state_data.select([
            pl.col("State_Code").alias("Code"),
            pl.col("State_Name").alias("Name"),
            pl.col("YYYYMM"),
            pl.col("Home_Price_Index")
        ])
        
        metro_renamed = metro_data.select([
            pl.col("CBSA_Code").alias("Code"),
            pl.col("CBSA_Name").alias("Name"),
            pl.col("YYYYMM"),
            pl.col("Home_Price_Index")
        ])
        
        combined = pl.concat([state_renamed, metro_renamed])
        
        combined_with_date = combined.with_columns([
            pl.col("YYYYMM").str.slice(0, 4).cast(pl.Int32).alias("Year"),
            pl.col("YYYYMM").str.slice(4, 2).cast(pl.Int32).alias("Month")
        ]).with_columns([
            pl.date(pl.col("Year"), pl.col("Month"), 1).alias("date")
        ])
        
        combined_with_quarters = combined_with_date.with_columns([
            pl.when(pl.col("Month").is_in([1, 2, 3])).then(pl.lit("Q1"))
            .when(pl.col("Month").is_in([4, 5, 6])).then(pl.lit("Q2"))
            .when(pl.col("Month").is_in([7, 8, 9])).then(pl.lit("Q3"))
            .when(pl.col("Month").is_in([10, 11, 12])).then(pl.lit("Q4"))
            .alias("QtrDt")
        ])
        
        sorted_data = combined_with_quarters.sort(["Code", "date"]).unique(["Code", "date"])
        
        with_sa = self._add_seasonal_adjustment(sorted_data)
        quarterly_data = self._convert_to_quarterly(with_sa)
        with_yoy = self._calculate_yoy_changes(quarterly_data)
        
        # Create national aggregate
        national_agg = with_yoy.group_by("date").agg([
            pl.col("HPI").mean().alias("HPI"),
            pl.col("HPI_SA").mean().alias("HPI_SA")
        ]).sort("date").with_columns([
            pl.col("HPI_SA").shift(4).alias("HPI_SA_lag4"),
            pl.col("HPI_SA").shift(1).alias("HPI_SA_lag1")
        ]).with_columns([
            ((pl.col("HPI_SA") / pl.col("HPI_SA_lag4")) - 1).alias("YOY_CoreLogicV4"),
            (pl.col("HPI_SA").log() - pl.col("HPI_SA_lag1").log()).alias("DLOG_CoreLogicV4")
        ]).with_columns([
            pl.lit("0").alias("Code"),
            pl.lit("National").alias("Name"),
            pl.lit(None, dtype=pl.Utf8).alias("QtrDt")
        ]).select(with_yoy.columns)
        
        final_data = pl.concat([with_yoy, national_agg]).sort(["Code", "date"])
        
        return final_data
    
    def _add_seasonal_adjustment(self, data: pl.DataFrame) -> pl.DataFrame:
        return data.with_columns([
            pl.col("Home_Price_Index").alias("HPI_SA")
        ])
    
    def _convert_to_quarterly(self, data: pl.DataFrame) -> pl.DataFrame:
        quarterly = data.group_by(["Code", "Name", "QtrDt"]).agg([
            pl.col("date").max().alias("date"),
            pl.col("Home_Price_Index").mean().alias("HPI"),
            pl.col("HPI_SA").mean().alias("HPI_SA")
        ])
        
        return quarterly.sort(["Code", "date"])
    
    def _calculate_yoy_changes(self, data: pl.DataFrame) -> pl.DataFrame:
        with_lags = data.with_columns([
            pl.col("HPI_SA").shift(4).over("Code").alias("HPI_SA_lag4"),
            pl.col("HPI_SA").shift(1).over("Code").alias("HPI_SA_lag1")
        ])
        
        with_changes = with_lags.with_columns([
            ((pl.col("HPI_SA") / pl.col("HPI_SA_lag4")) - 1).alias("YOY_CoreLogicV4"),
            (pl.col("HPI_SA").log() - pl.col("HPI_SA_lag1").log()).alias("DLOG_CoreLogicV4")
        ])
        
        return with_changes.filter(~pl.col("Name").str.contains("Micropolitan"))


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/data_projection.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/data_projection.py
# ====================================================================================
import polars as pl
import numpy as np
from datetime import date
from typing import Dict
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', '..'))
from Utils.glm_model_architecture import HPIGLMModel

class DataProjection:
    def __init__(self, params):
        self.params = params
    
    def run_state_forecast(
        self,
        scenario: str,
        region: str,
        national_data: pl.DataFrame,
        scenario_hpi_data: pl.DataFrame,
        regional_data: pl.DataFrame
    ) -> Dict[str, pl.DataFrame]:
        
        national_merged = self._merge_national_data(national_data, scenario_hpi_data)
        master_data = self._create_master_panel(regional_data, national_merged)
        model_results = self._run_glm_model(master_data, scenario, region)
        forecast_data = self._convert_to_hpi(model_results, scenario)
        final_results = self._prepare_final_output(forecast_data, scenario, region)
        
        return final_results
    
    def run_metro_forecast(
        self,
        scenario: str,
        region: str,
        national_data: pl.DataFrame,
        scenario_hpi_data: pl.DataFrame,
        regional_data: pl.DataFrame,
        state_results: pl.DataFrame,
        state_metro_map: pl.DataFrame,
        moodys_mapping: pl.DataFrame
    ) -> Dict[str, pl.DataFrame]:
        
        national_merged = self._merge_national_data(national_data, scenario_hpi_data)
        master_data = self._create_master_panel(regional_data, national_merged)
        state_mapped = self._add_state_data(master_data, state_results, state_metro_map, moodys_mapping)
        model_results = self._run_metro_glm_model(state_mapped, scenario, region)
        forecast_data = self._convert_to_hpi(model_results, scenario)
        final_results = self._prepare_final_output(forecast_data, scenario, region)
        
        return final_results
    
    def _merge_national_data(self, national_data: pl.DataFrame, scenario_hpi_data: pl.DataFrame) -> pl.DataFrame:
        # Get column names
        scenario_cols = scenario_hpi_data.columns
        date_col = next((col for col in scenario_cols if col.lower() in ['date', 'f_date']), 'date')
        hpi_col = next((col for col in scenario_cols if col.upper() == 'CORELOGIC_V4'), 'CORELOGIC_V4')
        
        # Rename scenario columns to match
        scenario_renamed = scenario_hpi_data.select([
            pl.col(date_col).alias("date"),
            pl.col(hpi_col).alias("forecast_hpi")
        ])
        
        national_with_scenario = national_data.join(
            scenario_renamed,
            on="date",
            how="outer"
        )
        
        # Remove duplicate at history end date
        cleaned_national = national_with_scenario.filter(
            ~((pl.col("HPI_SA").is_not_null()) & (pl.col("forecast_hpi").is_not_null()) & (pl.col("date") == date(2025, 3, 31)))
        )
        
        # Combine history and forecast
        final_national = cleaned_national.with_columns([
            pl.coalesce([pl.col("HPI_SA"), pl.col("forecast_hpi")]).alias("HPI_SA")
        ]).sort("date")
        
        # Recalculate YOY and DLOG
        final_national = final_national.with_columns([
            pl.col("HPI_SA").shift(4).alias("HPI_SA_lag4"),
            pl.col("HPI_SA").shift(1).alias("HPI_SA_lag1")
        ]).with_columns([
            ((pl.col("HPI_SA") / pl.col("HPI_SA_lag4")) - 1).alias("YOY_CoreLogicV4"),
            (pl.col("HPI_SA").log() - pl.col("HPI_SA_lag1").log()).alias("DLOG_CoreLogicV4")
        ])
        
        return final_national.filter(pl.col("date") >= date(2000, 1, 1))
    
    def _create_master_panel(self, regional_data: pl.DataFrame, national_data: pl.DataFrame) -> pl.DataFrame:
        codes = regional_data.select("Name").unique().with_columns(pl.lit(1).alias("ind"))
        dates = national_data.select("date").unique().with_columns(pl.lit(1).alias("ind"))
        
        master = codes.join(dates, on="ind").drop("ind")
        
        master_with_regional = master.join(
            regional_data,
            on=["date", "Name"],
            how="left"
        )
        
        master_with_national = master_with_regional.join(
            national_data.select([
                "date",
                pl.col("YOY_CoreLogicV4").alias("YOY_CoreLogicV4_US"),
                pl.col("DLOG_CoreLogicV4").alias("DLOG_CoreLogicV4_US")
            ]),
            on="date",
            how="left"
        )
        
        return master_with_national
    
    def _run_glm_model(self, data: pl.DataFrame, scenario: str, region: str) -> pl.DataFrame:
        from dependencies._constants import Constants
        
        train_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.REGRESSION_END_DATE) &
            (pl.col("DLOG_CoreLogicV4").is_not_null()) &
            (pl.col("DLOG_CoreLogicV4_US").is_not_null())
        )
        
        forecast_data = data.filter(pl.col("date") >= Constants.FORECAST_START_DATE)
        
        model = HPIGLMModel(
            target_col="DLOG_CoreLogicV4",
            categorical_cols=["Name"],
            continuous_cols=["DLOG_CoreLogicV4_US"]
        )
        
        model.fit(train_data)
        
        scored_data = model.score_data(forecast_data, "Pred")
        
        history_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.LAST_HISTORY_DATE)
        ).with_columns(pl.lit(None, dtype=pl.Float64).alias("Pred"))
        
        combined = pl.concat([history_data, scored_data]).sort(["Name", "date"])
        
        return combined
    
    def _run_metro_glm_model(self, data: pl.DataFrame, scenario: str, region: str) -> pl.DataFrame:
        from dependencies._constants import Constants
        
        train_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.REGRESSION_END_DATE) &
            (pl.col("DLOG_CoreLogicV4").is_not_null()) &
            (pl.col("DLOG_CoreLogicV4_St").is_not_null())
        )
        
        forecast_data = data.filter(pl.col("date") >= Constants.FORECAST_START_DATE)
        
        model = HPIGLMModel(
            target_col="DLOG_CoreLogicV4",
            categorical_cols=["Name"],
            continuous_cols=["DLOG_CoreLogicV4_St"]
        )
        
        model.fit(train_data)
        
        scored_data = model.score_data(forecast_data, "Pred")
        
        history_data = data.filter(
            (pl.col("date") >= Constants.REGRESSION_START_DATE) &
            (pl.col("date") <= Constants.LAST_HISTORY_DATE)
        ).with_columns(pl.lit(None, dtype=pl.Float64).alias("Pred"))
        
        combined = pl.concat([history_data, scored_data]).sort(["Name", "date"])
        
        return combined
    
    def _add_state_data(
        self,
        master_data: pl.DataFrame,
        state_results: pl.DataFrame,
        state_metro_map: pl.DataFrame,
        moodys_mapping: pl.DataFrame
    ) -> pl.DataFrame:
        
        # Get column names
        map_cols = state_metro_map.columns
        cbsa_code_col = next((col for col in map_cols if col.upper().replace('_', '').replace(' ', '') == 'CBSACODE'), 'CBSA_Code')
        st_col = next((col for col in map_cols if col.upper() == 'ST'), 'ST')
        
        mapping_cols = moodys_mapping.columns
        geography_col = next((col for col in mapping_cols if col.upper() == 'GEOGRAPHY'), 'Geography')
        geocode_col = next((col for col in mapping_cols if col.upper() == 'GEOCODE'), 'Geocode')
        
        state_metro_enhanced = state_metro_map.join(
            moodys_mapping.select([
                pl.col(geography_col).str.to_uppercase().alias("Geography_Upper"),
                pl.col(geocode_col)
            ]),
            left_on=st_col,
            right_on=geocode_col,
            how="left"
        )
        
        state_with_metro = state_results.join(
            state_metro_enhanced.select([
                "Geography_Upper",
                pl.col(cbsa_code_col).alias("metro_code")
            ]),
            left_on=pl.col("CBSA_name").str.to_uppercase(),
            right_on="Geography_Upper",
            how="left"
        )
        
        master_with_state = master_data.join(
            state_with_metro.select([
                "date",
                "metro_code",
                pl.col("HPI").alias("CoreLogicV4_St")
            ]),
            left_on=["date", "Code"],
            right_on=["date", "metro_code"],
            how="left"
        )
        
        master_with_state = master_with_state.with_columns([
            pl.col("CoreLogicV4_St").shift(1).over("Name").alias("CoreLogicV4_St_lag1")
        ]).with_columns([
            (pl.col("CoreLogicV4_St").log() - pl.col("CoreLogicV4_St_lag1").log()).alias("DLOG_CoreLogicV4_St")
        ])
        
        return master_with_state
    
    def _convert_to_hpi(self, model_results: pl.DataFrame, scenario: str) -> pl.DataFrame:
        from dependencies._constants import Constants
        
        hpi_col_name = f"HPIPred_{scenario}"
        
        with_hpi = model_results.with_columns([
            pl.lit(None, dtype=pl.Float64).alias(hpi_col_name)
        ])
        
        result_list = []
        for name in with_hpi["Name"].unique():
            name_data = with_hpi.filter(pl.col("Name") == name).sort("date")
            
            hpi_values = []
            current_hpi = None
            
            for row in name_data.iter_rows(named=True):
                if row["date"] == Constants.LAST_HISTORY_DATE:
                    current_hpi = row["HPI_SA"]
                    hpi_values.append(current_hpi)
                elif row["Pred"] is not None and current_hpi is not None:
                    current_hpi = current_hpi * np.exp(row["Pred"])
                    hpi_values.append(current_hpi)
                else:
                    hpi_values.append(current_hpi if current_hpi is not None else row.get("HPI_SA"))
            
            name_result = name_data.with_columns(
                pl.Series(name=hpi_col_name, values=hpi_values)
            )
            result_list.append(name_result)
        
        return pl.concat(result_list)
    
    def _prepare_final_output(self, forecast_data: pl.DataFrame, scenario: str, region: str) -> Dict[str, pl.DataFrame]:
        hpi_col = f"HPIPred_{scenario}"
        
        quarterly_data = forecast_data.select([
            pl.col("Code").alias("CBSA_Code"),
            pl.col("Name").alias("CBSA_name"),
            "date",
            pl.col(hpi_col).alias("HPI")
        ]).sort(["CBSA_Code", "CBSA_name", "date"])
        
        monthly_data = self._convert_quarterly_to_monthly(quarterly_data)
        
        quarterly_transposed = self._transpose_data(quarterly_data, "date", "CBSA_name", "HPI")
        monthly_transposed = self._transpose_data(monthly_data, "date", "CBSA_name", "HPI")
        
        return {
            "quarterly": quarterly_data,
            "monthly": monthly_data,
            "quarterly_transposed": quarterly_transposed,
            "monthly_transposed": monthly_transposed
        }
    
    def _convert_quarterly_to_monthly(self, quarterly_data: pl.DataFrame) -> pl.DataFrame:
        monthly_data = []
        
        for row in quarterly_data.iter_rows(named=True):
            quarter_date = row["date"]
            hpi = row["HPI"]
            
            if quarter_date.month == 3:
                months = [1, 2, 3]
            elif quarter_date.month == 6:
                months = [4, 5, 6]
            elif quarter_date.month == 9:
                months = [7, 8, 9]
            elif quarter_date.month == 12:
                months = [10, 11, 12]
            else:
                continue
            
            for month in months:
                monthly_date = date(quarter_date.year, month, 1)
                monthly_data.append({
                    "CBSA_Code": row["CBSA_Code"],
                    "CBSA_name": row["CBSA_name"],
                    "date": monthly_date,
                    "HPI": hpi
                })
        
        return pl.DataFrame(monthly_data)
    
    def _transpose_data(self, data: pl.DataFrame, date_col: str, id_col: str, value_col: str) -> pl.DataFrame:
        return data.pivot(
            values=value_col,
            index=date_col,
            columns=id_col
        )


# ====================================================================================
# FILE: src/gemini_scenario_models/hpi_projection_us/model.py
# LOCATION: src/gemini_scenario_models/hpi_projection_us/model.py
# ====================================================================================
import polars as pl
from typing import Dict
from pathlib import Path
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', '..'))
from Utils.data_import_helpers import DataImportHelper
from .data_preparation import DataPreparation
from .data_projection import DataProjection

class GLMModelScenarioProjection:
    def __init__(self, params):
        self.params = params
        self.data_prep = DataPreparation(params)
        self.data_projection = DataProjection(params)
        self.data_helper = DataImportHelper(params.input_dir)
    
    def run_projections(self, input_data: Dict[str, pl.DataFrame]) -> Dict[str, Dict[str, pl.DataFrame]]:
        print("Starting data preparation...")
        state_data, metro_data, combined_data = self.data_prep.run_data_prep(
            input_data["clv4_state_extract"],
            input_data["clv4_msa_extract"],
            input_data["moodys_mapping"]
        )
        
        print(f"Combined data shape: {combined_data.shape}")
        
        national_data = self._prepare_national_data(combined_data)
        print(f"National data shape: {national_data.shape}")
        
        regional_state_data = self._split_regional_data(combined_data, "state")
        print(f"State data shape: {regional_state_data.shape}")
        
        regional_metro_data = self._split_regional_data(combined_data, "metro")
        print(f"Metro data shape: {regional_metro_data.shape}")
        
        all_results = {}
        
        for scenario in self.params.scenarios:
            print(f"\nProcessing scenario: {scenario}")
            scenario_hpi_data = input_data[f"{scenario}_hpi_national"]
            
            print(f"  Running state forecast for {scenario}...")
            state_results = self.data_projection.run_state_forecast(
                scenario, "state", national_data, scenario_hpi_data, regional_state_data
            )
            
            print(f"  Running metro forecast for {scenario}...")
            metro_results = self.data_projection.run_metro_forecast(
                scenario, "metro", national_data, scenario_hpi_data, regional_metro_data,
                state_results["quarterly"], input_data["state_metro_map"], input_data["moodys_mapping"]
            )
            
            all_results[f"state_{scenario}"] = state_results
            all_results[f"metro_{scenario}"] = metro_results
            
            print(f"  Exporting results for {scenario}...")
            self._export_results(state_results, f"state_{scenario}")
            self._export_results(metro_results, f"metro_{scenario}")
        
        return all_results
    
    def _prepare_national_data(self, combined_data: pl.DataFrame) -> pl.DataFrame:
        return combined_data.filter(pl.col("Name") == "National")
    
    def _split_regional_data(self, combined_data: pl.DataFrame, region_type: str) -> pl.DataFrame:
        if region_type == "state":
            return combined_data.filter(
                (pl.col("Code").cast(pl.Int64, strict=False) > 0) & 
                (pl.col("Code").cast(pl.Int64, strict=False) <= 100)
            )
        elif region_type == "metro":
            return combined_data.filter(
                (pl.col("Code").cast(pl.Int64, strict=False) >= 100) & 
                (pl.col("Code").cast(pl.Int64, strict=False) < 100000)
            )
        else:
            return combined_data.filter(pl.col("Name") != "National")
    
    def _export_results(self, results: Dict[str, pl.DataFrame], scenario_region: str) -> None:
        output_dir = Path(self.params.output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        for data_type, data in results.items():
            if data_type in ["quarterly_transposed", "monthly_transposed"]:
                filename = f"CoreLogic_{scenario_region}_CECL24_V3_{data_type}.xlsx"
            else:
                filename = f"CoreLogic_{scenario_region}_CECL24_V3_{data_type}.xlsx"
            
            self.data_helper.export_excel(data, filename, scenario_region.split('_')[0])


# ====================================================================================
# FILE: main.py
# LOCATION: main.py (in root directory)
# ====================================================================================
import polars as pl
from pathlib import Path
from datetime import date
import sys
import os

# Add paths for imports
sys.path.insert(0, os.path.dirname(__file__))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src', 'gemini_scenario_models', 'hpi_projection_us'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Utils'))

from src.gemini_scenario_models.hpi_projection_us.model import GLMModelScenarioProjection
from src.gemini_scenario_models.hpi_projection_us.dependencies._parameters import Params
from Utils.data_import_helpers import DataImportHelper

def main():
    print("="*80)
    print("HPI PROJECTION MODEL - STARTING")
    print("="*80)
    
    params = Params(
        scenarios=["ce", "up", "dn", "dn2"],
        regions=["state", "metro"],
        input_dir="Input",
        output_dir="Output",
        last_history_date=date(2025, 3, 31),
        regression_start_date=date(2000, 3, 31),
        regression_end_date=date(2023, 6, 30),
        forecast_start_date=date(2025, 6, 30)
    )
    
    data_helper = DataImportHelper()
    
    print("\nLoading input data...")
    input_data = {
        "moodys_mapping": data_helper.import_excel("Basket_2016-10-5_13_45_V2.xlsx", "Mapping"),
        "clv4_state_extract": data_helper.import_excel("HPI Data by State.xlsx", "HPI Data by State"),
        "clv4_msa_extract": data_helper.import_excel("HPI Data by CBSA.xlsx", "HPI Data by CBSA"),
        "state_metro_map": data_helper.import_excel("state_metro_map.xlsx"),
        "ce_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "CE"),
        "up_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "UP"),
        "dn_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "DN"),
        "dn2_hpi_national": data_helper.import_excel("Data_Forecast_National_HPI_2025Q2.xlsx", "DN2")
    }
    
    print("\nInput data loaded successfully!")
    print(f"  Moodys mapping: {input_data['moodys_mapping'].shape}")
    print(f"  State extract: {input_data['clv4_state_extract'].shape}")
    print(f"  MSA extract: {input_data['clv4_msa_extract'].shape}")
    print(f"  State metro map: {input_data['state_metro_map'].shape}")
    print(f"  CE HPI National: {input_data['ce_hpi_national'].shape}")
    print(f"  UP HPI National: {input_data['up_hpi_national'].shape}")
    print(f"  DN HPI National: {input_data['dn_hpi_national'].shape}")
    print(f"  DN2 HPI National: {input_data['dn2_hpi_national'].shape}")
    
    projection_model = GLMModelScenarioProjection(params)
    results = projection_model.run_projections(input_data)
    
    print("\n" + "="*80)
    print("HPI PROJECTION MODEL COMPLETED SUCCESSFULLY!")
    print(f"Generated results for {len(results)} scenario-region combinations")
    print("="*80)
    
    # Print summary of results
    print("\nRESULTS SUMMARY:")
    for key, value in results.items():
        print(f"\n{key}:")
        for data_type, df in value.items():
            print(f"  {data_type}: {df.shape}")
    
    print("\n" + "="*80)
    print(f"All output files saved to: {params.output_dir}")
    print("="*80)

if __name__ == "__main__":
    main()


# ====================================================================================
# FILE: tests/__init__.py
# LOCATION: tests/__init__.py
# ====================================================================================
pass


# ====================================================================================
# FILE: tests/hpi_projection_us/__init__.py
# LOCATION: tests/hpi_projection_us/__init__.py
# ====================================================================================
pass


# ====================================================================================
# FILE: tests/hpi_projection_us/conftest.py
# LOCATION: tests/hpi_projection_us/conftest.py
# ====================================================================================
import pytest
import polars as pl
from datetime import date
from src.gemini_scenario_models.hpi_projection_us.dependencies._parameters import Params

@pytest.fixture
def sample_params():
    return Params(
        scenarios=["ce", "up"],
        regions=["state", "metro"],
        input_dir="test_input",
        output_dir="test_output",
        last_history_date=date(2025, 3, 31),
        regression_start_date=date(2000, 3, 31),
        regression_end_date=date(2023, 6, 30),
        forecast_start_date=date(2025, 6, 30)
    )

@pytest.fixture
def sample_clv4_data():
    return pl.DataFrame({
        "State Name": ["California", "Texas", "New York"],
        "Year": [2023, 2023, 2023],
        "Month": ["March", "March", "March"],
        "Home Price Index": [100.5, 95.2, 110.3]
    })

@pytest.fixture
def sample_moodys_mapping():
    return pl.DataFrame({
        "Geography": ["CALIFORNIA", "TEXAS", "NEW YORK"],
        "FIP": ["06", "48", "36"],
        "Geocode": ["CA", "TX", "NY"]
    })

@pytest.fixture
def sample_national_data():
    return pl.DataFrame({
        "date": [date(2023, 3, 31), date(2023, 6, 30), date(2023, 9, 30)],
        "CORELOGIC_V4": [100.0, 101.5, 103.2]
    })


# ====================================================================================
# FILE: tests/hpi_projection_us/test_data_preparation.py
# LOCATION: tests/hpi_projection_us/test_data_preparation.py
# ====================================================================================
import pytest
import polars as pl
from datetime import date
from src.gemini_scenario_models.hpi_projection_us.data_preparation import DataPreparation

class TestDataPreparation:
    def test_initialization(self, sample_params):
        data_prep = DataPreparation(sample_params)
        assert data_prep.params == sample_params
    
    def test_prepare_state_data(self, sample_params, sample_clv4_data, sample_moodys_mapping):
        data_prep = DataPreparation(sample_params)
        result = data_prep._prepare_state_data(sample_clv4_data, sample_moodys_mapping)
        
        assert "State_Code" in result.columns
        assert "YYYYMM" in result.columns
        assert len(result) > 0


# ====================================================================================
# FILE: pyproject.toml
# LOCATION: pyproject.toml (in root directory)
# ====================================================================================
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hpi-projection-models"
version = "1.0.0"
description = "GLM-based HPI projection models for scenario analysis"
requires-python = ">=3.9"
dependencies = [
    "polars>=0.20.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
]

[tool.black]
line-length = 100
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"


# ====================================================================================
# FILE: requirements.txt
# LOCATION: requirements.txt (in root directory)
# ====================================================================================
polars>=0.20.0
scikit-learn>=1.3.0
numpy>=1.24.0
pandas>=2.0.0
openpyxl>=3.1.0
xlsxwriter>=3.1.0


# ====================================================================================
# FILE: README.md
# LOCATION: README.md (in root directory)
# ====================================================================================
# HPI Projection Models

GLM-based Home Price Index (HPI) projection models for scenario analysis.

## Project Structure

```
project_root/
├── Input/                          # Input data files
│   ├── Basket_2016-10-5_13_45_V2.xlsx
│   ├── HPI Data by State.xlsx
│   ├── HPI Data by CBSA.xlsx
│   ├── state_metro_map.xlsx
│   └── Data_Forecast_National_HPI_2025Q2.xlsx
├── Output/                         # Generated output files
├── Utils/                          # Utility modules
│   ├── __init__.py
│   ├── data_import_helpers.py
│   └── glm_model_architecture.py
├── src/
│   └── gemini_scenario_models/
│       ├── __init__.py
│       └── hpi_projection_us/
│           ├── __init__.py
│           ├── model.py
│           ├── data_preparation.py
│           ├── data_projection.py
│           └── dependencies/
│               ├── __init__.py
│               ├── _constants.py
│               ├── _parameters.py
│               ├── _dataclasses.py
│               └── _schemas.py
├── tests/
│   ├── __init__.py
│   └── hpi_projection_us/
│       ├── __init__.py
│       ├── conftest.py
│       └── test_data_preparation.py
├── main.py
├── requirements.txt
├── pyproject.toml
└── README.md
```

## Installation

```bash
pip install -r requirements.txt
```

## Usage

Place your input Excel files in the `Input/` directory, then run:

```bash
python main.py
```

Results will be saved to the `Output/` directory.

## Scenarios

The model supports four scenarios:
- CE (Central/Base case)
- UP (Upside)
- DN (Downside)
- DN2 (Severe Downside)

## Output Files

For each scenario-region combination:
- Quarterly data
- Monthly data
- Transposed quarterly data
- Transposed monthly data